{"version":3,"file":"index.cjs.js","sources":["../src/utils/misc.ts","../src/providers/eip155.ts","../src/providers/solana.ts","../src/providers/cosmos.ts","../src/constants/values.ts","../src/UniversalProvider.ts","../src/index.ts"],"sourcesContent":["import { NamespaceConfig, Namespace } from \"../types\";\n\nexport function getChainFromNamespaces(namespaces: NamespaceConfig): [string, string] {\n  const chain = namespaces[Object.keys(namespaces)[0]]?.chains[0];\n  return [chain.split(\":\")[0], chain.split(\":\")[1]];\n}\n\nexport function getRpcUrl(chainId: string, rpc: Namespace): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getChainId([chainId])];\n  }\n  return rpcUrl;\n}\n\nexport function getChainId(chains: string[]): number {\n  return Number(chains[0].split(\":\")[1]);\n}\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getRpcUrl } from \"../utils\";\nimport EventEmitter from \"events\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.client = opts.client;\n    this.events = opts.events;\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = this.getDefaultChainId();\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as any;\n      case \"eth_accounts\":\n        return this.getAccounts() as any;\n      case \"wallet_switchEthereumChain\": {\n        const newChainId = args.request.params ? args.request.params[0]?.chainId : \"0x0\";\n        this.setDefaultChain(parseInt(newChainId, 16).toString());\n        return null as any;\n      }\n      case \"eth_chainId\":\n        return this.getDefaultChainId() as any;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = parseInt(chainId);\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private getDefaultChainId(): number {\n    if (this.chainId) return this.chainId;\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return parseInt(chainId.split(\":\")[1]);\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChainId();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getDefaultChainId(): string {\n    if (this.chainId) return this.chainId;\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl } from \"../utils\";\n\nclass CosmosProvider implements IProvider {\n  public name = \"cosmos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChainId();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getDefaultChainId(): string {\n    if (this.chainId) return this.chainId;\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(\"chainChanged\", this.chainId);\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default CosmosProvider;\n","export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.com\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n","import pino from \"pino\";\nimport SignClient from \"@walletconnect/sign-client\";\nimport { ProviderAccounts } from \"eip1193-provider\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger } from \"@walletconnect/logger\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport CosmosProvider from \"./providers/cosmos\";\nimport { getChainFromNamespaces } from \"./utils\";\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE } from \"./constants\";\nimport EventEmitter from \"events\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces!: NamespaceConfig;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session!: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session?.topic,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n    chain?: string | undefined,\n  ): void {\n    this.request(args, chain)\n      .then((response) => callback(null, response))\n      .catch((error) => callback(error, undefined));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    if (!this.session) {\n      throw new Error(\"Please call connect() before enable()\");\n    }\n    const accounts = await this.requestAccounts();\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    await this.client.disconnect({\n      topic: this.session.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    const { namespaces } = opts;\n    this.setNamespaces(namespaces);\n    this.createProviders();\n    await this.cleanupPendingPairings();\n    return opts.skipPairing === true ? undefined : await this.pair(opts.pairingTopic);\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    const { uri, approval } = await this.client.connect({\n      pairingTopic,\n      requiredNamespaces: this.namespaces,\n    });\n\n    if (uri) {\n      this.uri = uri;\n      this.events.emit(\"display_uri\", uri);\n    }\n\n    this.session = await approval();\n    this.onSessionUpdate();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      const [namespace, chainId] = this.validateChain(chain);\n      this.getProvider(namespace).setDefaultChain(chainId, rpcUrl);\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll({ active: false });\n\n    if (!isValidArray(inactivePairings)) return;\n    await Promise.all([\n      inactivePairings.map((pairing) =>\n        this.client.pairing.delete(pairing.topic, getSdkError(\"USER_DISCONNECTED\")),\n      ),\n      inactivePairings.map((pairing) => this.client.core.relayer.unsubscribe(pairing.topic)),\n      inactivePairings.map((pairing) => this.client.core.expirer.del(pairing.topic)),\n    ]);\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces =\n      ((await this.client.core.storage.getItem(`${STORAGE}/namespaces`)) as NamespaceConfig) || {};\n    if (this.namespaces) {\n      this.createProviders();\n    }\n\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.onSessionUpdate();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata, // fetch metadata automatically if not provided?\n        storageOptions: this.providerOpts.storageOptions,\n        name: this.providerOpts.name,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    Object.keys(this.namespaces).forEach((namespace) => {\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            client: this.client,\n            namespace: this.namespaces[namespace],\n            events: this.events,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            client: this.client,\n            namespace: this.namespaces[namespace],\n            events: this.events,\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[namespace] = new CosmosProvider({\n            client: this.client,\n            namespace: this.namespaces[namespace],\n            events: this.events,\n          });\n          break;\n        case \"polkadot\":\n          //TODO:\n          break;\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", () => {\n      this.events.emit(\"session_delete\");\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    if (!this.rpcProviders[namespace]) {\n      throw new Error(`Provider not found: ${namespace}`);\n    }\n    return this.rpcProviders[namespace];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) =>\n      this.getProvider(namespace).updateNamespace(this.session.namespaces[namespace]),\n    );\n  }\n\n  private setNamespaces(namespaces: NamespaceConfig): void {\n    if (!namespaces || !Object.keys(namespaces).length) {\n      throw new Error(\"Namespaces must be not empty\");\n    }\n    this.client.core.storage.setItem(`${STORAGE}/namespaces`, namespaces);\n    this.namespaces = namespaces;\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n\n    // validate namespace\n    if (namespace) {\n      if (!Object.keys(this.namespaces).includes(namespace)) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n\n    return !namespace || !chainId ? getChainFromNamespaces(this.namespaces) : [namespace, chainId];\n  }\n\n  private async requestAccounts(): Promise<string[]> {\n    const [namespace] = this.validateChain();\n    return await this.getProvider(namespace).requestAccounts();\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"names":["namespaces","_a","chain","chainId","rpc","rpcUrl","chains","Eip155Provider","opts","args","newChainId","namespace","getRpcUrl","JsonRpcProvider","HttpConnection","http","accounts","account","SolanaProvider","CosmosProvider","UniversalProvider","EventEmitter","pino","getDefaultLoggerOptions","LOGGER","provider","__spreadValues","callback","response","error","getSdkError","event","listener","pairingTopic","uri","approval","inactivePairings","isValidArray","pairing","STORAGE","lastKeyIndex","SignClient","RELAY_URL","topic","params","_session","__spreadProps","getChainFromNamespaces","Provider"],"mappings":"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"}