{"version":3,"file":"huddle01-iframe.cjs.production.min.js","sources":["../src/iframeApi.ts","../src/HuddleIframe.tsx"],"sourcesContent":["type IframeEventCallback = (data: any) => void;\n\nexport enum HuddleAppEvent {\n  AVATAR_URL_CHANGED = 'avatar-url-changed',\n  PEER_JOIN = 'peer-join',\n  PEER_LEFT = 'peer-left',\n  ME_LEFT = 'me-left',\n}\n\nexport type HuddleClientMethodName =\n  | 'muteMic'\n  | 'unmuteMic'\n  | 'enableWebcam'\n  | 'disableWebcam'\n  | 'enableShare'\n  | 'disableShare'\n  | 'startRecording'\n  | 'stopRecording'\n  | 'sendReaction'\n  | 'connectWallet'\n  | 'changeAvatarUrl'\n  | 'toggleRaiseHand';\n\nexport type HuddleClientInfoMethodName = 'getParticipants';\n\nexport type Reaction =\n  | ''\n  | '😂'\n  | '😢'\n  | '😦'\n  | '😍'\n  | '🤔'\n  | '👀'\n  | '🙌'\n  | '👍'\n  | '👎'\n  | '🔥'\n  | '🍻'\n  | '🚀'\n  | '🎉'\n  | '❤️'\n  | '💯';\n\nexport type HuddleClientMethods = {\n  [key in HuddleClientMethodName]: (data?: any) => void;\n};\n\nexport const triggerIframeEvent = (event: string, data: any) => {\n  window.parent.postMessage(\n    { type: 'room-event', eventData: { event, ...data } },\n    '*'\n  );\n};\n\nconst on = (eventName: HuddleAppEvent, callback: IframeEventCallback) =>\n  window.addEventListener(\n    'message',\n    event => {\n      if (event.data.type !== 'room-event') return;\n\n      if (event.data.eventData.event === eventName) {\n        callback(event.data.eventData);\n      }\n\n      // Do we trust the sender of this message?  (might be\n      // different from what we originally opened, for example).\n      if (event.origin !== 'http://example.com') return;\n    },\n    false\n  );\n\nconst callMethod = (\n  methodType: HuddleClientMethodName | HuddleClientInfoMethodName,\n  methodData?: any\n) => {\n  const huddleIframe: HTMLIFrameElement = document.getElementById(\n    'huddle01-iframe'\n  ) as HTMLIFrameElement;\n  if (huddleIframe?.contentWindow)\n    huddleIframe.contentWindow.postMessage(\n      { type: 'huddle01-iframe', methodType, methodData },\n      '*'\n    );\n  else console.log('huddleIframe is null');\n};\n\nconst methods: HuddleClientMethods = {\n  muteMic: () => {\n    callMethod('muteMic');\n  },\n  unmuteMic: () => {\n    callMethod('unmuteMic');\n  },\n  enableWebcam: () => {\n    callMethod('enableWebcam');\n  },\n  disableWebcam: () => {\n    callMethod('disableWebcam');\n  },\n  enableShare: () => {\n    callMethod('enableShare');\n  },\n  disableShare: () => {\n    callMethod('disableShare');\n  },\n  startRecording: () => {\n    callMethod('startRecording');\n  },\n  stopRecording: () => {\n    callMethod('stopRecording');\n  },\n  sendReaction: (reaction: Reaction) => {\n    callMethod('sendReaction', reaction);\n  },\n  connectWallet: address => {\n    callMethod('connectWallet', address);\n  },\n  toggleRaiseHand: () => {\n    callMethod('toggleRaiseHand');\n  },\n  changeAvatarUrl: (avatarUrl) => {\n    callMethod('changeAvatarUrl', avatarUrl);\n  },\n};\n\nexport type HuddleClientInfoMethods = {\n  [key in HuddleClientInfoMethodName]: (data?: any) => void;\n};\n\nconst infoMethods: HuddleClientInfoMethods = {\n  getParticipants: () => {\n    callMethod('getParticipants');\n  },\n};\n\nexport const huddleIframeApp = {\n  on,\n  methods,\n  infoMethods,\n};\n","import React from 'react';\n\nexport interface IframeConfig {\n  roomUrl: string;\n  noBorder?: boolean;\n  height?: string;\n  width?: string;\n}\n\nexport interface Props {\n  config: IframeConfig;\n}\n\nexport const HuddleIframe: React.FC<Props> = ({ config }) => {\n  const { noBorder, roomUrl, height, width } = config;\n\n  return (\n    <iframe\n      id=\"huddle01-iframe\"\n      src={roomUrl}\n      style={{ border: noBorder ? 'none' : '3px #333dde solid' }}\n      name=\"myiFrame\"\n      scrolling=\"no\"\n      height={height || '90%'}\n      width={width || '90%'}\n      allowFullScreen\n      allow=\"camera; microphone; clipboard-read; clipboard-write; display-capture\"\n    ></iframe>\n  );\n};\n"],"names":["HuddleAppEvent","callMethod","methodType","methodData","huddleIframe","document","getElementById","contentWindow","postMessage","type","console","log","huddleIframeApp","on","eventName","callback","window","addEventListener","event","data","eventData","methods","muteMic","unmuteMic","enableWebcam","disableWebcam","enableShare","disableShare","startRecording","stopRecording","sendReaction","reaction","connectWallet","address","toggleRaiseHand","changeAvatarUrl","avatarUrl","infoMethods","getParticipants","config","React","id","src","roomUrl","style","border","noBorder","name","scrolling","height","width","allowFullScreen","allow","parent"],"mappings":"0EAEYA,4SAAAA,EAAAA,yBAAAA,oEAEVA,wBACAA,wBACAA,oBAyCF,IAwBMC,EAAa,SACjBC,EACAC,GAEA,IAAMC,EAAkCC,SAASC,eAC/C,yBAEEF,GAAAA,EAAcG,cAChBH,EAAaG,cAAcC,YACzB,CAAEC,KAAM,kBAAmBP,WAAAA,EAAYC,WAAAA,GACvC,KAECO,QAAQC,IAAI,yBAoDNC,EAAkB,CAC7BC,GAlFS,SAACC,EAA2BC,GAA5B,OACTC,OAAOC,iBACL,WACA,SAAAC,GAC0B,eAApBA,EAAMC,KAAKV,MAEXS,EAAMC,KAAKC,UAAUF,QAAUJ,GACjCC,EAASG,EAAMC,KAAKC,cAOxB,IAqEFC,QAnDmC,CACnCC,QAAS,WACPrB,EAAW,YAEbsB,UAAW,WACTtB,EAAW,cAEbuB,aAAc,WACZvB,EAAW,iBAEbwB,cAAe,WACbxB,EAAW,kBAEbyB,YAAa,WACXzB,EAAW,gBAEb0B,aAAc,WACZ1B,EAAW,iBAEb2B,eAAgB,WACd3B,EAAW,mBAEb4B,cAAe,WACb5B,EAAW,kBAEb6B,aAAc,SAACC,GACb9B,EAAW,eAAgB8B,IAE7BC,cAAe,SAAAC,GACbhC,EAAW,gBAAiBgC,IAE9BC,gBAAiB,WACfjC,EAAW,oBAEbkC,gBAAiB,SAACC,GAChBnC,EAAW,kBAAmBmC,KAiBhCC,YAT2C,CAC3CC,gBAAiB,WACfrC,EAAW,2CCtH8B,gBAAGsC,IAAAA,OAG9C,OACEC,0BACEC,GAAG,kBACHC,IALyCH,EAA3BI,QAMdC,MAAO,CAAEC,OANgCN,EAArCO,SAMwB,OAAS,qBACrCC,KAAK,WACLC,UAAU,KACVC,OATyCV,EAAlBU,QASL,MAClBC,MAVyCX,EAAVW,OAUf,MAChBC,mBACAC,MAAM,+HDqBsB,SAAClC,EAAeC,GAChDH,OAAOqC,OAAO7C,YACZ,CAAEC,KAAM,aAAcW,aAAaF,MAAAA,GAAUC,IAC7C"}