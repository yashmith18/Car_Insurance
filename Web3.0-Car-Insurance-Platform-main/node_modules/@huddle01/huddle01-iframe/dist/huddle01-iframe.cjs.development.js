'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

var HuddleIframe = function HuddleIframe(_ref) {
  var config = _ref.config;
  var noBorder = config.noBorder,
      roomUrl = config.roomUrl,
      height = config.height,
      width = config.width;
  return React.createElement("iframe", {
    id: "huddle01-iframe",
    src: roomUrl,
    style: {
      border: noBorder ? 'none' : '3px #333dde solid'
    },
    name: "myiFrame",
    scrolling: "no",
    height: height || '90%',
    width: width || '90%',
    allowFullScreen: true,
    allow: "camera; microphone; clipboard-read; clipboard-write; display-capture"
  });
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

(function (HuddleAppEvent) {
  HuddleAppEvent["AVATAR_URL_CHANGED"] = "avatar-url-changed";
  HuddleAppEvent["PEER_JOIN"] = "peer-join";
  HuddleAppEvent["PEER_LEFT"] = "peer-left";
  HuddleAppEvent["ME_LEFT"] = "me-left";
})(exports.HuddleAppEvent || (exports.HuddleAppEvent = {}));

var triggerIframeEvent = function triggerIframeEvent(event, data) {
  window.parent.postMessage({
    type: 'room-event',
    eventData: _extends({
      event: event
    }, data)
  }, '*');
};

var on = function on(eventName, callback) {
  return window.addEventListener('message', function (event) {
    if (event.data.type !== 'room-event') return;

    if (event.data.eventData.event === eventName) {
      callback(event.data.eventData);
    } // Do we trust the sender of this message?  (might be
    // different from what we originally opened, for example).


    if (event.origin !== 'http://example.com') return;
  }, false);
};

var callMethod = function callMethod(methodType, methodData) {
  var huddleIframe = document.getElementById('huddle01-iframe');
  if (huddleIframe != null && huddleIframe.contentWindow) huddleIframe.contentWindow.postMessage({
    type: 'huddle01-iframe',
    methodType: methodType,
    methodData: methodData
  }, '*');else console.log('huddleIframe is null');
};

var methods = {
  muteMic: function muteMic() {
    callMethod('muteMic');
  },
  unmuteMic: function unmuteMic() {
    callMethod('unmuteMic');
  },
  enableWebcam: function enableWebcam() {
    callMethod('enableWebcam');
  },
  disableWebcam: function disableWebcam() {
    callMethod('disableWebcam');
  },
  enableShare: function enableShare() {
    callMethod('enableShare');
  },
  disableShare: function disableShare() {
    callMethod('disableShare');
  },
  startRecording: function startRecording() {
    callMethod('startRecording');
  },
  stopRecording: function stopRecording() {
    callMethod('stopRecording');
  },
  sendReaction: function sendReaction(reaction) {
    callMethod('sendReaction', reaction);
  },
  connectWallet: function connectWallet(address) {
    callMethod('connectWallet', address);
  },
  toggleRaiseHand: function toggleRaiseHand() {
    callMethod('toggleRaiseHand');
  },
  changeAvatarUrl: function changeAvatarUrl(avatarUrl) {
    callMethod('changeAvatarUrl', avatarUrl);
  }
};
var infoMethods = {
  getParticipants: function getParticipants() {
    callMethod('getParticipants');
  }
};
var huddleIframeApp = {
  on: on,
  methods: methods,
  infoMethods: infoMethods
};

exports.HuddleIframe = HuddleIframe;
exports.huddleIframeApp = huddleIframeApp;
exports.triggerIframeEvent = triggerIframeEvent;
//# sourceMappingURL=huddle01-iframe.cjs.development.js.map
