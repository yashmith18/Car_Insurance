declare type IframeEventCallback = (data: any) => void;
export declare enum HuddleAppEvent {
    AVATAR_URL_CHANGED = "avatar-url-changed",
    PEER_JOIN = "peer-join",
    PEER_LEFT = "peer-left",
    ME_LEFT = "me-left"
}
export declare type HuddleClientMethodName = 'muteMic' | 'unmuteMic' | 'enableWebcam' | 'disableWebcam' | 'enableShare' | 'disableShare' | 'startRecording' | 'stopRecording' | 'sendReaction' | 'connectWallet' | 'changeAvatarUrl' | 'toggleRaiseHand';
export declare type HuddleClientInfoMethodName = 'getParticipants';
export declare type Reaction = '' | '😂' | '😢' | '😦' | '😍' | '🤔' | '👀' | '🙌' | '👍' | '👎' | '🔥' | '🍻' | '🚀' | '🎉' | '❤️' | '💯';
export declare type HuddleClientMethods = {
    [key in HuddleClientMethodName]: (data?: any) => void;
};
export declare const triggerIframeEvent: (event: string, data: any) => void;
export declare type HuddleClientInfoMethods = {
    [key in HuddleClientInfoMethodName]: (data?: any) => void;
};
export declare const huddleIframeApp: {
    on: (eventName: HuddleAppEvent, callback: IframeEventCallback) => void;
    methods: HuddleClientMethods;
    infoMethods: HuddleClientInfoMethods;
};
export {};
