{"ast":null,"code":"'use strict';\n\n/**\n * @template T\n * @typedef {Object} Peek\n * @property {() => IteratorResult<T, void>} peek\n */\n\n/**\n * @template T\n * @typedef {Object} AsyncPeek\n * @property {() => Promise<IteratorResult<T, void>>} peek\n */\n\n/**\n * @template T\n * @typedef {Object} Push\n * @property {(value:T) => void} push\n */\n\n/**\n * @template T\n * @typedef {Iterable<T> & Peek<T> & Push<T> & Iterator<T>} Peekable<T>\n */\n\n/**\n * @template T\n * @typedef {AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>} AsyncPeekable<T>\n */\n\n/**\n * @template {Iterable<any> | AsyncIterable<any>} I\n * @param {I} iterable\n * @returns {I extends Iterable<infer T>\n *  ? Peekable<T>\n *  : I extends AsyncIterable<infer T>\n *  ? AsyncPeekable<T>\n *  : never\n * }\n */\nfunction peekableIterator(iterable) {\n  // @ts-ignore\n  const [iterator, symbol] = iterable[Symbol.asyncIterator]\n  // @ts-ignore\n  ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n  // @ts-ignore\n  : [iterable[Symbol.iterator](), Symbol.iterator];\n\n  /** @type {any[]} */\n  const queue = [];\n\n  // @ts-ignore\n  return {\n    peek: () => {\n      return iterator.next();\n    },\n    push: value => {\n      queue.push(value);\n    },\n    next: () => {\n      if (queue.length) {\n        return {\n          done: false,\n          value: queue.shift()\n        };\n      }\n      return iterator.next();\n    },\n    [symbol]() {\n      return this;\n    }\n  };\n}\nmodule.exports = peekableIterator;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}