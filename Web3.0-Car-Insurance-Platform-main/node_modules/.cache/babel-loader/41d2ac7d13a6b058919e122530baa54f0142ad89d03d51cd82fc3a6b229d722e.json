{"ast":null,"code":"'use strict';\n\nconst ConsumableBuffer = require('./consumable-buffer');\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\n/**\n * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n */\nfunction wrapHash(hashFn) {\n  /**\n   * @param {InfiniteHash | Uint8Array} value\n   */\n  function hashing(value) {\n    if (value instanceof InfiniteHash) {\n      // already a hash. return it\n      return value;\n    } else {\n      return new InfiniteHash(value, hashFn);\n    }\n  }\n  return hashing;\n}\nclass InfiniteHash {\n  /**\n   *\n   * @param {Uint8Array} value\n   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n   */\n  constructor(value, hashFn) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('can only hash Uint8Arrays');\n    }\n    this._value = value;\n    this._hashFn = hashFn;\n    this._depth = -1;\n    this._availableBits = 0;\n    this._currentBufferIndex = 0;\n\n    /** @type {ConsumableBuffer[]} */\n    this._buffers = [];\n  }\n\n  /**\n   * @param {number} bits\n   */\n  async take(bits) {\n    let pendingBits = bits;\n    while (this._availableBits < pendingBits) {\n      await this._produceMoreBits();\n    }\n    let result = 0;\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const available = Math.min(hash.availableBits(), pendingBits);\n      const took = hash.take(available);\n      result = (result << available) + took;\n      pendingBits -= available;\n      this._availableBits -= available;\n      if (hash.availableBits() === 0) {\n        this._currentBufferIndex++;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake(bits) {\n    let pendingBits = bits;\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);\n      hash.untake(availableForUntake);\n      pendingBits -= availableForUntake;\n      this._availableBits += availableForUntake;\n      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n        this._depth--;\n        this._currentBufferIndex--;\n      }\n    }\n  }\n  async _produceMoreBits() {\n    this._depth++;\n    const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;\n    const hashValue = await this._hashFn(value);\n    const buffer = new ConsumableBuffer(hashValue);\n    this._buffers.push(buffer);\n    this._availableBits += buffer.availableBits();\n  }\n}\nmodule.exports = wrapHash;\nmodule.exports.InfiniteHash = InfiniteHash;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}