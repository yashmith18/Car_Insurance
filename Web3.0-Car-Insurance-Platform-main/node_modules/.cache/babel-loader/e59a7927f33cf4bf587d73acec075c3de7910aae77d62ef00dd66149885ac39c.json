{"ast":null,"code":"import EventEmitter from \"eventemitter3\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { getRpcUrl, signingMethods } from \"@walletconnect/utils\";\nimport { SignerConnection } from \"@walletconnect/signer-connection\";\nclass WalletConnectProvider {\n  constructor(opts) {\n    this.events = new EventEmitter();\n    this.rpc = {\n      infuraId: opts === null || opts === void 0 ? void 0 : opts.infuraId,\n      custom: opts === null || opts === void 0 ? void 0 : opts.rpc\n    };\n    this.signer = new JsonRpcProvider(new SignerConnection(opts));\n    const chainId = this.signer.connection.chainId || (opts === null || opts === void 0 ? void 0 : opts.chainId) || 1;\n    this.http = this.setHttpProvider(chainId);\n    this.registerEventListeners();\n  }\n  get connected() {\n    return this.signer.connection.connected;\n  }\n  get connector() {\n    return this.signer.connection.connector;\n  }\n  get accounts() {\n    return this.signer.connection.accounts;\n  }\n  get chainId() {\n    return this.signer.connection.chainId;\n  }\n  get rpcUrl() {\n    var _a;\n    return ((_a = this.http) === null || _a === void 0 ? void 0 : _a.connection).url || \"\";\n  }\n  async request(args) {\n    switch (args.method) {\n      case \"eth_requestAccounts\":\n        await this.connect();\n        return this.signer.connection.accounts;\n      case \"eth_accounts\":\n        return this.signer.connection.accounts;\n      case \"eth_chainId\":\n        return this.signer.connection.chainId;\n      default:\n        break;\n    }\n    if (signingMethods.includes(args.method)) {\n      return this.signer.request(args);\n    }\n    if (typeof this.http === \"undefined\") {\n      throw new Error(`Cannot request JSON-RPC method (${args.method}) without provided rpc url`);\n    }\n    return this.http.request(args);\n  }\n  sendAsync(args, callback) {\n    this.request(args).then(response => callback(null, response)).catch(error => callback(error, undefined));\n  }\n  async enable() {\n    const accounts = await this.request({\n      method: \"eth_requestAccounts\"\n    });\n    return accounts;\n  }\n  async connect() {\n    if (!this.signer.connection.connected) {\n      await this.signer.connect();\n    }\n  }\n  async disconnect() {\n    if (this.signer.connection.connected) {\n      await this.signer.disconnect();\n    }\n  }\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n  get isWalletConnect() {\n    return true;\n  }\n  registerEventListeners() {\n    this.signer.connection.on(\"accountsChanged\", accounts => {\n      this.events.emit(\"accountsChanged\", accounts);\n    });\n    this.signer.connection.on(\"chainChanged\", chainId => {\n      this.http = this.setHttpProvider(chainId);\n      this.events.emit(\"chainChanged\", chainId);\n    });\n    this.signer.on(\"disconnect\", () => {\n      this.events.emit(\"disconnect\");\n    });\n  }\n  setHttpProvider(chainId) {\n    const rpcUrl = getRpcUrl(chainId, this.rpc);\n    if (typeof rpcUrl === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpcUrl));\n    return http;\n  }\n}\nexport default WalletConnectProvider;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}