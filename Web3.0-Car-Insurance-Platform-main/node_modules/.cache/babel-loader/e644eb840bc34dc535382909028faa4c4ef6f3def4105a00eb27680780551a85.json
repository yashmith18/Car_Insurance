{"ast":null,"code":"import * as ed25519 from \"@stablelib/ed25519\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { fromMiliseconds } from \"@walletconnect/time\";\nimport { JWT_IRIDIUM_ALG, JWT_IRIDIUM_TYP, KEY_PAIR_SEED_LENGTH } from \"./constants\";\nimport { decodeIss, decodeJWT, encodeData, encodeIss, encodeJWT } from \"./utils\";\nexport function generateKeyPair() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : randomBytes(KEY_PAIR_SEED_LENGTH);\n  return ed25519.generateKeyPairFromSeed(seed);\n}\nexport async function signJWT(sub, aud, ttl, keyPair) {\n  let iat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : fromMiliseconds(Date.now());\n  const header = {\n    alg: JWT_IRIDIUM_ALG,\n    typ: JWT_IRIDIUM_TYP\n  };\n  const iss = encodeIss(keyPair.publicKey);\n  const exp = iat + ttl;\n  const payload = {\n    iss,\n    sub,\n    aud,\n    iat,\n    exp\n  };\n  const data = encodeData({\n    header,\n    payload\n  });\n  const signature = ed25519.sign(keyPair.secretKey, data);\n  return encodeJWT({\n    header,\n    payload,\n    signature\n  });\n}\nexport async function verifyJWT(jwt) {\n  const {\n    header,\n    payload,\n    data,\n    signature\n  } = decodeJWT(jwt);\n  if (header.alg !== JWT_IRIDIUM_ALG || header.typ !== JWT_IRIDIUM_TYP) {\n    throw new Error(\"JWT must use EdDSA algorithm\");\n  }\n  const publicKey = decodeIss(payload.iss);\n  return ed25519.verify(publicKey, data, signature);\n}\n//# sourceMappingURL=api.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}