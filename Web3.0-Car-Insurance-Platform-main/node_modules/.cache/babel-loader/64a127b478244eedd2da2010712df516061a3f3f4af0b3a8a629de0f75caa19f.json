{"ast":null,"code":"module.exports = getBlocksForRange;\nasync function getBlocksForRange(_ref) {\n  let {\n    provider,\n    fromBlock,\n    toBlock\n  } = _ref;\n  if (!fromBlock) fromBlock = toBlock;\n  const fromBlockNumber = hexToInt(fromBlock);\n  const toBlockNumber = hexToInt(toBlock);\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1;\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);\n  const blockBodies = await Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));\n  return blockBodies;\n}\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  const hexString = int.toString(16);\n  return '0x' + hexString;\n}\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({\n      id: 1,\n      jsonrpc: '2.0',\n      method,\n      params\n    }, (err, res) => {\n      if (err) return reject(err);\n      resolve(res.result);\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}