{"ast":null,"code":"const rawPipe = function () {\n  let res;\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  while (fns.length) {\n    res = fns.shift()(res);\n  }\n  return res;\n};\nconst isIterable = obj => obj && (typeof obj[Symbol.asyncIterator] === 'function' || typeof obj[Symbol.iterator] === 'function' || typeof obj.next === 'function' // Probably, right?\n);\n\nconst isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable(obj.source);\nconst duplexPipelineFn = duplex => source => {\n  duplex.sink(source); // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n  return duplex.source;\n};\nconst pipe = function () {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    const duplex = fns[0];\n    fns[0] = () => duplex.source;\n    // Iterable at start: wrap in function\n  } else if (isIterable(fns[0])) {\n    const source = fns[0];\n    fns[0] = () => source;\n  }\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink;\n    }\n  }\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i]);\n      }\n    }\n  }\n  return rawPipe(...fns);\n};\nmodule.exports = pipe;\nmodule.exports.pipe = pipe;\nmodule.exports.rawPipe = rawPipe;\nmodule.exports.isIterable = isIterable;\nmodule.exports.isDuplex = isDuplex;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}