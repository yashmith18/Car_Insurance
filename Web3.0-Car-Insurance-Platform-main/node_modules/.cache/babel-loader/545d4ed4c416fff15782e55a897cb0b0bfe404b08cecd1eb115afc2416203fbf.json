{"ast":null,"code":"import * as React from 'react';\nimport { hydrate } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nfunction useHydrate(state) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nconst Hydrate = _ref => {\n  let {\n    children,\n    options,\n    state\n  } = _ref;\n  useHydrate(state, options);\n  return children;\n};\nexport { Hydrate, useHydrate };\n//# sourceMappingURL=Hydrate.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}