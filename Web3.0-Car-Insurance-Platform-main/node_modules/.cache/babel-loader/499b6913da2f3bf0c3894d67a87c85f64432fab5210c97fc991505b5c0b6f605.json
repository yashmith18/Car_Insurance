{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst symbol = Symbol.for('BufferList');\nfunction BufferList(buf) {\n  if (!(this instanceof BufferList)) {\n    return new BufferList(buf);\n  }\n  BufferList._init.call(this, buf);\n}\nBufferList._init = function _init(buf) {\n  Object.defineProperty(this, symbol, {\n    value: true\n  });\n  this._bufs = [];\n  this.length = 0;\n  if (buf) {\n    this.append(buf);\n  }\n};\nBufferList.prototype._new = function _new(buf) {\n  return new BufferList(buf);\n};\nBufferList.prototype._offset = function _offset(offset) {\n  if (offset === 0) {\n    return [0, 0];\n  }\n  let tot = 0;\n  for (let i = 0; i < this._bufs.length; i++) {\n    const _t = tot + this._bufs[i].length;\n    if (offset < _t || i === this._bufs.length - 1) {\n      return [i, offset - tot];\n    }\n    tot = _t;\n  }\n};\nBufferList.prototype._reverseOffset = function (blOffset) {\n  const bufferId = blOffset[0];\n  let offset = blOffset[1];\n  for (let i = 0; i < bufferId; i++) {\n    offset += this._bufs[i].length;\n  }\n  return offset;\n};\nBufferList.prototype.get = function get(index) {\n  if (index > this.length || index < 0) {\n    return undefined;\n  }\n  const offset = this._offset(index);\n  return this._bufs[offset[0]][offset[1]];\n};\nBufferList.prototype.slice = function slice(start, end) {\n  if (typeof start === 'number' && start < 0) {\n    start += this.length;\n  }\n  if (typeof end === 'number' && end < 0) {\n    end += this.length;\n  }\n  return this.copy(null, 0, start, end);\n};\nBufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {\n  if (typeof srcStart !== 'number' || srcStart < 0) {\n    srcStart = 0;\n  }\n  if (typeof srcEnd !== 'number' || srcEnd > this.length) {\n    srcEnd = this.length;\n  }\n  if (srcStart >= this.length) {\n    return dst || Buffer.alloc(0);\n  }\n  if (srcEnd <= 0) {\n    return dst || Buffer.alloc(0);\n  }\n  const copy = !!dst;\n  const off = this._offset(srcStart);\n  const len = srcEnd - srcStart;\n  let bytes = len;\n  let bufoff = copy && dstStart || 0;\n  let start = off[1];\n\n  // copy/slice everything\n  if (srcStart === 0 && srcEnd === this.length) {\n    if (!copy) {\n      // slice, but full concat if multiple buffers\n      return this._bufs.length === 1 ? this._bufs[0] : Buffer.concat(this._bufs, this.length);\n    }\n\n    // copy, need to copy individual buffers\n    for (let i = 0; i < this._bufs.length; i++) {\n      this._bufs[i].copy(dst, bufoff);\n      bufoff += this._bufs[i].length;\n    }\n    return dst;\n  }\n\n  // easy, cheap case where it's a subset of one of the buffers\n  if (bytes <= this._bufs[off[0]].length - start) {\n    return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);\n  }\n  if (!copy) {\n    // a slice, we need something to copy in to\n    dst = Buffer.allocUnsafe(len);\n  }\n  for (let i = off[0]; i < this._bufs.length; i++) {\n    const l = this._bufs[i].length - start;\n    if (bytes > l) {\n      this._bufs[i].copy(dst, bufoff, start);\n      bufoff += l;\n    } else {\n      this._bufs[i].copy(dst, bufoff, start, start + bytes);\n      bufoff += l;\n      break;\n    }\n    bytes -= l;\n    if (start) {\n      start = 0;\n    }\n  }\n\n  // safeguard so that we don't return uninitialized memory\n  if (dst.length > bufoff) return dst.slice(0, bufoff);\n  return dst;\n};\nBufferList.prototype.shallowSlice = function shallowSlice(start, end) {\n  start = start || 0;\n  end = typeof end !== 'number' ? this.length : end;\n  if (start < 0) {\n    start += this.length;\n  }\n  if (end < 0) {\n    end += this.length;\n  }\n  if (start === end) {\n    return this._new();\n  }\n  const startOffset = this._offset(start);\n  const endOffset = this._offset(end);\n  const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);\n  if (endOffset[1] === 0) {\n    buffers.pop();\n  } else {\n    buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);\n  }\n  if (startOffset[1] !== 0) {\n    buffers[0] = buffers[0].slice(startOffset[1]);\n  }\n  return this._new(buffers);\n};\nBufferList.prototype.toString = function toString(encoding, start, end) {\n  return this.slice(start, end).toString(encoding);\n};\nBufferList.prototype.consume = function consume(bytes) {\n  // first, normalize the argument, in accordance with how Buffer does it\n  bytes = Math.trunc(bytes);\n  // do nothing if not a positive number\n  if (Number.isNaN(bytes) || bytes <= 0) return this;\n  while (this._bufs.length) {\n    if (bytes >= this._bufs[0].length) {\n      bytes -= this._bufs[0].length;\n      this.length -= this._bufs[0].length;\n      this._bufs.shift();\n    } else {\n      this._bufs[0] = this._bufs[0].slice(bytes);\n      this.length -= bytes;\n      break;\n    }\n  }\n  return this;\n};\nBufferList.prototype.duplicate = function duplicate() {\n  const copy = this._new();\n  for (let i = 0; i < this._bufs.length; i++) {\n    copy.append(this._bufs[i]);\n  }\n  return copy;\n};\nBufferList.prototype.append = function append(buf) {\n  if (buf == null) {\n    return this;\n  }\n  if (buf.buffer) {\n    // append a view of the underlying ArrayBuffer\n    this._appendBuffer(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength));\n  } else if (Array.isArray(buf)) {\n    for (let i = 0; i < buf.length; i++) {\n      this.append(buf[i]);\n    }\n  } else if (this._isBufferList(buf)) {\n    // unwrap argument into individual BufferLists\n    for (let i = 0; i < buf._bufs.length; i++) {\n      this.append(buf._bufs[i]);\n    }\n  } else {\n    // coerce number arguments to strings, since Buffer(number) does\n    // uninitialized memory allocation\n    if (typeof buf === 'number') {\n      buf = buf.toString();\n    }\n    this._appendBuffer(Buffer.from(buf));\n  }\n  return this;\n};\nBufferList.prototype._appendBuffer = function appendBuffer(buf) {\n  this._bufs.push(buf);\n  this.length += buf.length;\n};\nBufferList.prototype.indexOf = function (search, offset, encoding) {\n  if (encoding === undefined && typeof offset === 'string') {\n    encoding = offset;\n    offset = undefined;\n  }\n  if (typeof search === 'function' || Array.isArray(search)) {\n    throw new TypeError('The \"value\" argument must be one of type string, Buffer, BufferList, or Uint8Array.');\n  } else if (typeof search === 'number') {\n    search = Buffer.from([search]);\n  } else if (typeof search === 'string') {\n    search = Buffer.from(search, encoding);\n  } else if (this._isBufferList(search)) {\n    search = search.slice();\n  } else if (Array.isArray(search.buffer)) {\n    search = Buffer.from(search.buffer, search.byteOffset, search.byteLength);\n  } else if (!Buffer.isBuffer(search)) {\n    search = Buffer.from(search);\n  }\n  offset = Number(offset || 0);\n  if (isNaN(offset)) {\n    offset = 0;\n  }\n  if (offset < 0) {\n    offset = this.length + offset;\n  }\n  if (offset < 0) {\n    offset = 0;\n  }\n  if (search.length === 0) {\n    return offset > this.length ? this.length : offset;\n  }\n  const blOffset = this._offset(offset);\n  let blIndex = blOffset[0]; // index of which internal buffer we're working on\n  let buffOffset = blOffset[1]; // offset of the internal buffer we're working on\n\n  // scan over each buffer\n  for (; blIndex < this._bufs.length; blIndex++) {\n    const buff = this._bufs[blIndex];\n    while (buffOffset < buff.length) {\n      const availableWindow = buff.length - buffOffset;\n      if (availableWindow >= search.length) {\n        const nativeSearchResult = buff.indexOf(search, buffOffset);\n        if (nativeSearchResult !== -1) {\n          return this._reverseOffset([blIndex, nativeSearchResult]);\n        }\n        buffOffset = buff.length - search.length + 1; // end of native search window\n      } else {\n        const revOffset = this._reverseOffset([blIndex, buffOffset]);\n        if (this._match(revOffset, search)) {\n          return revOffset;\n        }\n        buffOffset++;\n      }\n    }\n    buffOffset = 0;\n  }\n  return -1;\n};\nBufferList.prototype._match = function (offset, search) {\n  if (this.length - offset < search.length) {\n    return false;\n  }\n  for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {\n    if (this.get(offset + searchOffset) !== search[searchOffset]) {\n      return false;\n    }\n  }\n  return true;\n};\n(function () {\n  const methods = {\n    readDoubleBE: 8,\n    readDoubleLE: 8,\n    readFloatBE: 4,\n    readFloatLE: 4,\n    readInt32BE: 4,\n    readInt32LE: 4,\n    readUInt32BE: 4,\n    readUInt32LE: 4,\n    readInt16BE: 2,\n    readInt16LE: 2,\n    readUInt16BE: 2,\n    readUInt16LE: 2,\n    readInt8: 1,\n    readUInt8: 1,\n    readIntBE: null,\n    readIntLE: null,\n    readUIntBE: null,\n    readUIntLE: null\n  };\n  for (const m in methods) {\n    (function (m) {\n      if (methods[m] === null) {\n        BufferList.prototype[m] = function (offset, byteLength) {\n          return this.slice(offset, offset + byteLength)[m](0, byteLength);\n        };\n      } else {\n        BufferList.prototype[m] = function () {\n          let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          return this.slice(offset, offset + methods[m])[m](0);\n        };\n      }\n    })(m);\n  }\n})();\n\n// Used internally by the class and also as an indicator of this object being\n// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser\n// environment because there could be multiple different copies of the\n// BufferList class and some `BufferList`s might be `BufferList`s.\nBufferList.prototype._isBufferList = function _isBufferList(b) {\n  return b instanceof BufferList || BufferList.isBufferList(b);\n};\nBufferList.isBufferList = function isBufferList(b) {\n  return b != null && b[symbol];\n};\nmodule.exports = BufferList;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}