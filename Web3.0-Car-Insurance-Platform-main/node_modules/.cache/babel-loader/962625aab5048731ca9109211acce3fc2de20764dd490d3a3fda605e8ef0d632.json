{"ast":null,"code":"import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n  setEventListener(setup) {\n    var _this$cleanup2;\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n  setOnline(online) {\n    this.online = online;\n    if (online) {\n      this.onOnline();\n    }\n  }\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n    return navigator.onLine;\n  }\n}\nconst onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}