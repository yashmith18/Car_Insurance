{"ast":null,"code":"'use strict';\n\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\nfunction batch(source) {\n  try {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return async function* () {\n      /** @type {T[]} */\n      let things = [];\n      if (size < 1) {\n        size = 1;\n      }\n      for await (const thing of source) {\n        things.push(thing);\n        while (things.length >= size) {\n          yield things.slice(0, size);\n          things = things.slice(size);\n        }\n      }\n      while (things.length) {\n        yield things.slice(0, size);\n        things = things.slice(size);\n      }\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\nmodule.exports = batch;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}