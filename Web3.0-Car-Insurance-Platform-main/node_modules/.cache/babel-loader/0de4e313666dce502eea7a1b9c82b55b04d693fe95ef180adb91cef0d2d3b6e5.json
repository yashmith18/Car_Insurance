{"ast":null,"code":"import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport function importer(source, blockstore) {\n  try {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return async function* () {\n      const opts = defaultOptions(options);\n      let dagBuilder;\n      if (typeof options.dagBuilder === 'function') {\n        dagBuilder = options.dagBuilder;\n      } else {\n        dagBuilder = dagBuilderFn;\n      }\n      let treeBuilder;\n      if (typeof options.treeBuilder === 'function') {\n        treeBuilder = options.treeBuilder;\n      } else {\n        treeBuilder = treeBuilderFn;\n      }\n      let candidates;\n      if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n        candidates = source;\n      } else {\n        candidates = [source];\n      }\n      for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n        yield {\n          cid: entry.cid,\n          path: entry.path,\n          unixfs: entry.unixfs,\n          size: entry.size\n        };\n      }\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}