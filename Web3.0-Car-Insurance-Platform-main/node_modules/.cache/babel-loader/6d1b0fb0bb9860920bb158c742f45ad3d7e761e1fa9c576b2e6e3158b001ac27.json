{"ast":null,"code":"export function promisify(originalFn, thisArg) {\n  const promisifiedFunction = async function () {\n    for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      callArgs[_key] = arguments[_key];\n    }\n    return new Promise((resolve, reject) => {\n      const callback = (err, data) => {\n        if (err === null || typeof err === \"undefined\") {\n          reject(err);\n        }\n        resolve(data);\n      };\n      originalFn.apply(thisArg, [...callArgs, callback]);\n    });\n  };\n  return promisifiedFunction;\n}\nexport function formatRpcError(error) {\n  const message = error.message || \"Failed or Rejected Request\";\n  let code = -32000;\n  if (error && !error.code) {\n    switch (message) {\n      case \"Parse error\":\n        code = -32700;\n        break;\n      case \"Invalid request\":\n        code = -32600;\n        break;\n      case \"Method not found\":\n        code = -32601;\n        break;\n      case \"Invalid params\":\n        code = -32602;\n        break;\n      case \"Internal error\":\n        code = -32603;\n        break;\n      default:\n        code = -32000;\n        break;\n    }\n  }\n  const result = {\n    code,\n    message\n  };\n  if (error.data) {\n    result.data = error.data;\n  }\n  return result;\n}\n//# sourceMappingURL=payload.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}