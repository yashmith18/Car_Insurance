{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction throttledQueue(maxRequestsPerInterval, interval, evenlySpaced) {\n  if (evenlySpaced === void 0) {\n    evenlySpaced = false;\n  }\n  /**\n   * If all requests should be evenly spaced, adjust to suit.\n   */\n  if (evenlySpaced) {\n    interval = interval / maxRequestsPerInterval;\n    maxRequestsPerInterval = 1;\n  }\n  var queue = [];\n  var lastIntervalStart = 0;\n  var numRequestsPerInterval = 0;\n  var timeout;\n  /**\n   * Gets called at a set interval to remove items from the queue.\n   * This is a self-adjusting timer, since the browser's setTimeout is highly inaccurate.\n   */\n  var dequeue = function () {\n    var intervalEnd = lastIntervalStart + interval;\n    var now = Date.now();\n    /**\n     * Adjust the timer if it was called too early.\n     */\n    if (now < intervalEnd) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      timeout !== undefined && clearTimeout(timeout);\n      timeout = setTimeout(dequeue, intervalEnd - now);\n      return;\n    }\n    lastIntervalStart = now;\n    numRequestsPerInterval = 0;\n    for (var _i = 0, _a = queue.splice(0, maxRequestsPerInterval); _i < _a.length; _i++) {\n      var callback = _a[_i];\n      numRequestsPerInterval++;\n      void callback();\n    }\n    if (queue.length) {\n      timeout = setTimeout(dequeue, interval);\n    } else {\n      timeout = undefined;\n    }\n  };\n  return function (fn) {\n    return new Promise(function (resolve, reject) {\n      var callback = function () {\n        return Promise.resolve().then(fn).then(resolve).catch(reject);\n      };\n      var now = Date.now();\n      if (timeout === undefined && now - lastIntervalStart > interval) {\n        lastIntervalStart = now;\n        numRequestsPerInterval = 0;\n      }\n      if (numRequestsPerInterval++ < maxRequestsPerInterval) {\n        void callback();\n      } else {\n        queue.push(callback);\n        if (timeout === undefined) {\n          timeout = setTimeout(dequeue, lastIntervalStart + interval - now);\n        }\n      }\n    });\n  };\n}\nmodule.exports = throttledQueue;\nexports.default = throttledQueue;\n//# sourceMappingURL=throttledQueue.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}