{"ast":null,"code":"import * as crypto from \"@walletconnect/crypto\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { convertArrayBufferToBuffer, convertBufferToArrayBuffer } from \"@walletconnect/utils\";\nexport async function generateKey(length) {\n  const _length = (length || 256) / 8;\n  const bytes = crypto.randomBytes(_length);\n  const result = convertBufferToArrayBuffer(encoding.arrayToBuffer(bytes));\n  return result;\n}\nexport async function verifyHmac(payload, key) {\n  const cipherText = encoding.hexToArray(payload.data);\n  const iv = encoding.hexToArray(payload.iv);\n  const hmac = encoding.hexToArray(payload.hmac);\n  const hmacHex = encoding.arrayToHex(hmac, false);\n  const unsigned = encoding.concatArrays(cipherText, iv);\n  const chmac = await crypto.hmacSha256Sign(key, unsigned);\n  const chmacHex = encoding.arrayToHex(chmac, false);\n  if (encoding.removeHexPrefix(hmacHex) === encoding.removeHexPrefix(chmacHex)) {\n    return true;\n  }\n  return false;\n}\nexport async function encrypt(data, key, providedIv) {\n  const _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n  const ivArrayBuffer = providedIv || (await generateKey(128));\n  const iv = encoding.bufferToArray(convertArrayBufferToBuffer(ivArrayBuffer));\n  const ivHex = encoding.arrayToHex(iv, false);\n  const contentString = JSON.stringify(data);\n  const content = encoding.utf8ToArray(contentString);\n  const cipherText = await crypto.aesCbcEncrypt(iv, _key, content);\n  const cipherTextHex = encoding.arrayToHex(cipherText, false);\n  const unsigned = encoding.concatArrays(cipherText, iv);\n  const hmac = await crypto.hmacSha256Sign(_key, unsigned);\n  const hmacHex = encoding.arrayToHex(hmac, false);\n  return {\n    data: cipherTextHex,\n    hmac: hmacHex,\n    iv: ivHex\n  };\n}\nexport async function decrypt(payload, key) {\n  const _key = encoding.bufferToArray(convertArrayBufferToBuffer(key));\n  if (!_key) {\n    throw new Error(\"Missing key: required for decryption\");\n  }\n  const verified = await verifyHmac(payload, _key);\n  if (!verified) {\n    return null;\n  }\n  const cipherText = encoding.hexToArray(payload.data);\n  const iv = encoding.hexToArray(payload.iv);\n  const buffer = await crypto.aesCbcDecrypt(iv, _key, cipherText);\n  const utf8 = encoding.arrayToUtf8(buffer);\n  let data;\n  try {\n    data = JSON.parse(utf8);\n  } catch (error) {\n    return null;\n  }\n  return data;\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}