{"ast":null,"code":"/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n  /**\n   * Creates an instance of Rabin.\n   * @param { import(\"./../dist/rabin-wasm\") } asModule\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param {number} polynomial\n   * @memberof Rabin\n   */\n  constructor(asModule) {\n    let bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    let min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8 * 1024;\n    let max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32 * 1024;\n    let windowSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 64;\n    let polynomial = arguments.length > 5 ? arguments[5] : undefined;\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);\n    this.polynomial = polynomial;\n  }\n\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n  fingerprint(buf) {\n    const {\n      __retain,\n      __release,\n      __allocArray,\n      __getInt32Array,\n      Int32Array_ID,\n      Uint8Array_ID\n    } = this.asModule;\n    const lengths = new Int32Array(Math.ceil(buf.length / this.min));\n    const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));\n    const pointer = __retain(__allocArray(Uint8Array_ID, buf));\n    const out = this.rabin.fingerprint(pointer, lengthsPtr);\n    const processed = __getInt32Array(out);\n    __release(pointer);\n    __release(lengthsPtr);\n    const end = processed.indexOf(0);\n    return end >= 0 ? processed.subarray(0, end) : processed;\n  }\n}\nmodule.exports = Rabin;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}