{"ast":null,"code":"import { Connector, __privateAdd, __privateGet, __privateSet, __publicField } from \"./chunk-5NCTPR6C.js\";\n\n// src/injected.ts\nimport { AddChainError, ChainNotConfiguredError, ConnectorNotFoundError, ResourceUnavailableError, SwitchChainError, UserRejectedRequestError, getClient, normalizeChainId } from \"@wagmi/core\";\nimport { providers } from \"ethers\";\nimport { getAddress, hexValue } from \"ethers/lib/utils.js\";\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n  if (!ethereum) return \"Injected\";\n  const getName = provider => {\n    if (provider.isAvalanche) return \"Core Wallet\";\n    if (provider.isBitKeep) return \"BitKeep\";\n    if (provider.isBraveWallet) return \"Brave Wallet\";\n    if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n    if (provider.isExodus) return \"Exodus\";\n    if (provider.isFrame) return \"Frame\";\n    if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n    if (provider.isMathWallet) return \"MathWallet\";\n    if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n    if (provider.isOpera) return \"Opera\";\n    if (provider.isPortal) return \"Ripio Portal\";\n    if (provider.isRainbow) return \"Rainbow\";\n    if (provider.isTally) return \"Tally\";\n    if (provider.isTokenPocket) return \"TokenPocket\";\n    if (provider.isTokenary) return \"Tokenary\";\n    if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n    if (provider.isMetaMask) return \"MetaMask\";\n  };\n  if (ethereum.providers?.length) {\n    const nameSet = /* @__PURE__ */new Set();\n    let unknownCount = 1;\n    for (const provider of ethereum.providers) {\n      let name = getName(provider);\n      if (!name) {\n        name = `Unknown Wallet #${unknownCount}`;\n        unknownCount += 1;\n      }\n      nameSet.add(name);\n    }\n    const names = [...nameSet];\n    if (names.length) return names;\n    return names[0] ?? \"Injected\";\n  }\n  return getName(ethereum) ?? \"Injected\";\n}\n\n// src/injected.ts\nvar _provider, _switchingChains;\nvar InjectedConnector = class extends Connector {\n  constructor() {\n    let {\n      chains,\n      options: options_\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = {\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider: () => typeof window !== \"undefined\" ? window.ethereum : void 0,\n      ...options_\n    };\n    super({\n      chains,\n      options\n    });\n    __publicField(this, \"id\");\n    __publicField(this, \"name\");\n    __publicField(this, \"ready\");\n    __privateAdd(this, _provider, void 0);\n    __privateAdd(this, _switchingChains, void 0);\n    __publicField(this, \"shimDisconnectKey\", \"injected.shimDisconnect\");\n    __publicField(this, \"onAccountsChanged\", accounts => {\n      if (accounts.length === 0) this.emit(\"disconnect\");else this.emit(\"change\", {\n        account: getAddress(accounts[0])\n      });\n    });\n    __publicField(this, \"onChainChanged\", chainId => {\n      const id = normalizeChainId(chainId);\n      const unsupported = this.isChainUnsupported(id);\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    __publicField(this, \"onDisconnect\", () => {\n      if (this.options.shimChainChangedDisconnect && __privateGet(this, _switchingChains)) {\n        __privateSet(this, _switchingChains, false);\n        return;\n      }\n      this.emit(\"disconnect\");\n      if (this.options.shimDisconnect) getClient().storage?.removeItem(this.shimDisconnectKey);\n    });\n    const provider = options.getProvider();\n    if (typeof options.name === \"string\") this.name = options.name;else if (provider) {\n      const detectedName = getInjectedName(provider);\n      if (options.name) this.name = options.name(detectedName);else {\n        if (typeof detectedName === \"string\") this.name = detectedName;else this.name = detectedName[0];\n      }\n    } else this.name = \"Injected\";\n    this.id = \"injected\";\n    this.ready = !!provider;\n  }\n  async connect() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      const accounts = await provider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const account = getAddress(accounts[0]);\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options.shimDisconnect) getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      if (error.code === -32002) throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n  async disconnect() {\n    const provider = await this.getProvider();\n    if (!provider?.removeListener) return;\n    provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n    provider.removeListener(\"chainChanged\", this.onChainChanged);\n    provider.removeListener(\"disconnect\", this.onDisconnect);\n    if (this.options.shimDisconnect) getClient().storage?.removeItem(this.shimDisconnectKey);\n  }\n  async getAccount() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const accounts = await provider.request({\n      method: \"eth_accounts\"\n    });\n    return getAddress(accounts[0]);\n  }\n  async getChainId() {\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"eth_chainId\"\n    }).then(normalizeChainId);\n  }\n  async getProvider() {\n    const provider = this.options.getProvider();\n    if (provider) __privateSet(this, _provider, provider);\n    return __privateGet(this, _provider);\n  }\n  async getSigner() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n    return new providers.Web3Provider(provider, chainId).getSigner(account);\n  }\n  async isAuthorized() {\n    try {\n      if (this.options.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) return false;\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      const account = await this.getAccount();\n      return !!account;\n    } catch {\n      return false;\n    }\n  }\n  async switchChain(chainId) {\n    if (this.options.shimChainChangedDisconnect) __privateSet(this, _switchingChains, true);\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    const id = hexValue(chainId);\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: id\n        }]\n      });\n      return this.chains.find(x => x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${id}`,\n        network: `${id}`,\n        nativeCurrency: {\n          name: \"Ether\",\n          decimals: 18,\n          symbol: \"ETH\"\n        },\n        rpcUrls: {\n          default: {\n            http: [\"\"]\n          },\n          public: {\n            http: [\"\"]\n          }\n        }\n      };\n    } catch (error) {\n      const chain = this.chains.find(x => x.id === chainId);\n      if (!chain) throw new ChainNotConfiguredError({\n        chainId,\n        connectorId: this.id\n      });\n      if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: id,\n              chainName: chain.name,\n              nativeCurrency: chain.nativeCurrency,\n              rpcUrls: [chain.rpcUrls.public?.http[0] ?? \"\"],\n              blockExplorerUrls: this.getBlockExplorerUrls(chain)\n            }]\n          });\n          return chain;\n        } catch (addError) {\n          if (this.isUserRejectedRequestError(addError)) throw new UserRejectedRequestError(error);\n          throw new AddChainError();\n        }\n      }\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      throw new SwitchChainError(error);\n    }\n  }\n  async watchAsset(_ref) {\n    let {\n      address,\n      decimals = 18,\n      image,\n      symbol\n    } = _ref;\n    const provider = await this.getProvider();\n    if (!provider) throw new ConnectorNotFoundError();\n    return provider.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address,\n          decimals,\n          image,\n          symbol\n        }\n      }\n    });\n  }\n  isUserRejectedRequestError(error) {\n    return error.code === 4001;\n  }\n};\n_provider = new WeakMap();\n_switchingChains = new WeakMap();\nexport { InjectedConnector };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}