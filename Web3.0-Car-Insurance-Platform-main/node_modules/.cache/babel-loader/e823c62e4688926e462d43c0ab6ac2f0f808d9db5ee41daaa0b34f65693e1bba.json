{"ast":null,"code":"import { __rest, __read, __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport * as React from 'react';\nimport { forwardRef, useContext, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useMotionValue } from '../../value/use-motion-value.mjs';\nimport { useTransform } from '../../value/use-transform.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nfunction useDefaultMotionValue(value, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n  return isMotionValue(value) ? value : useMotionValue(defaultValue);\n}\nfunction ReorderItem(_a, externalRef) {\n  var children = _a.children,\n    style = _a.style,\n    value = _a.value,\n    _b = _a.as,\n    as = _b === void 0 ? \"li\" : _b,\n    onDrag = _a.onDrag,\n    _c = _a.layout,\n    layout = _c === void 0 ? true : _c,\n    props = __rest(_a, [\"children\", \"style\", \"value\", \"as\", \"onDrag\", \"layout\"]);\n  var Component = useConstant(function () {\n    return motion(as);\n  });\n  var context = useContext(ReorderContext);\n  var point = {\n    x: useDefaultMotionValue(style === null || style === void 0 ? void 0 : style.x),\n    y: useDefaultMotionValue(style === null || style === void 0 ? void 0 : style.y)\n  };\n  var zIndex = useTransform([point.x, point.y], function (_a) {\n    var _b = __read(_a, 2),\n      latestX = _b[0],\n      latestY = _b[1];\n    return latestX || latestY ? 1 : \"unset\";\n  });\n  var measuredLayout = useRef(null);\n  invariant(Boolean(context), \"Reorder.Item must be a child of Reorder.Group\");\n  var _d = context,\n    axis = _d.axis,\n    registerItem = _d.registerItem,\n    updateOrder = _d.updateOrder;\n  useEffect(function () {\n    registerItem(value, measuredLayout.current);\n  }, [context]);\n  return React.createElement(Component, __assign({\n    drag: axis\n  }, props, {\n    dragSnapToOrigin: true,\n    style: __assign(__assign({}, style), {\n      x: point.x,\n      y: point.y,\n      zIndex: zIndex\n    }),\n    layout: layout,\n    onDrag: function (event, gesturePoint) {\n      var velocity = gesturePoint.velocity;\n      velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);\n      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, gesturePoint);\n    },\n    onLayoutMeasure: function (measured) {\n      measuredLayout.current = measured;\n    },\n    ref: externalRef\n  }), children);\n}\nvar Item = forwardRef(ReorderItem);\nexport { Item, ReorderItem };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}