{"ast":null,"code":"import toIterable from 'browser-readablestream-to-it';\nimport { CarBlockIterator } from '@ipld/car/iterator';\nimport { recursive as unixFsExporter } from 'ipfs-unixfs-exporter';\nimport { VerifyingGetOnlyBlockStore } from \"./utils/verifying-get-only-blockstore.js\";\nimport { MemoryBlockStore } from \"../blockstore/memory.js\";\n// Export unixfs entries from car file\nexport async function* unpack(carReader, roots) {\n  const verifyingBlockService = VerifyingGetOnlyBlockStore.fromCarReader(carReader);\n  if (!roots || roots.length === 0) {\n    roots = await carReader.getRoots();\n  }\n  for (const root of roots) {\n    yield* unixFsExporter(root, verifyingBlockService, {/* options */});\n  }\n}\nexport function unpackStream(readable) {\n  try {\n    let {\n      roots,\n      blockstore: userBlockstore\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return async function* () {\n      const carIterator = await CarBlockIterator.fromIterable(asAsyncIterable(readable));\n      const blockstore = userBlockstore || new MemoryBlockStore();\n      for await (const block of carIterator) {\n        await blockstore.put(block.cid, block.bytes);\n      }\n      const verifyingBlockStore = VerifyingGetOnlyBlockStore.fromBlockstore(blockstore);\n      if (!roots || roots.length === 0) {\n        roots = await carIterator.getRoots();\n      }\n      for (const root of roots) {\n        yield* unixFsExporter(root, verifyingBlockStore);\n      }\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n/**\n * Upgrade a ReadableStream to an AsyncIterable if it isn't already\n *\n * ReadableStream (e.g res.body) is asyncIterable in node, but not in chrome, yet.\n * see: https://bugs.chromium.org/p/chromium/issues/detail?id=929585\n */\nfunction asAsyncIterable(readable) {\n  // @ts-ignore how to convince tsc that we are checking the type here?\n  return Symbol.asyncIterator in readable ? readable : toIterable(readable);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}