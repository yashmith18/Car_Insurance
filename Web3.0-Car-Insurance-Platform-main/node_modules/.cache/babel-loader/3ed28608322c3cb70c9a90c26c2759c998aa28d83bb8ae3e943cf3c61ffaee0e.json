{"ast":null,"code":"// src/client.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport { createClient as createCoreClient, createStorage, noopStorage } from \"@wagmi/core\";\nfunction createClient(_ref) {\n  let {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          cacheTime: 1e3 * 60 * 60 * 24,\n          networkMode: \"offlineFirst\",\n          refetchOnWindowFocus: false,\n          retry: 0\n        },\n        mutations: {\n          networkMode: \"offlineFirst\"\n        }\n      }\n    }),\n    storage = createStorage({\n      storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n    }),\n    persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n      key: \"cache\",\n      storage,\n      serialize: x => x,\n      deserialize: x => x\n    }) : void 0,\n    ...config\n  } = _ref;\n  const client = createCoreClient({\n    ...config,\n    storage\n  });\n  if (persister) persistQueryClient({\n    queryClient,\n    persister,\n    dehydrateOptions: {\n      shouldDehydrateQuery: query => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n    }\n  });\n  return Object.assign(client, {\n    queryClient\n  });\n}\n\n// src/context.ts\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(void 0);\nfunction WagmiConfig(_ref2) {\n  let {\n    children,\n    client\n  } = _ref2;\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: client.queryClient,\n      context: queryClientContext\n    }),\n    value: client\n  });\n}\nfunction useClient() {\n  const client = React.useContext(Context);\n  if (!client) throw new Error([\"`useClient` must be used within `WagmiConfig`.\\n\", \"Read more: https://wagmi.sh/react/WagmiConfig\"].join(\"\\n\"));\n  return client;\n}\n\n// src/hooks/accounts/useAccount.ts\nimport { getAccount, watchAccount } from \"@wagmi/core\";\nimport * as React7 from \"react\";\n\n// src/hooks/utils/query/useBaseQuery.ts\nimport { notifyManager, useIsRestoring, useQueryClient, useQueryErrorResetBoundary } from \"@tanstack/react-query\";\nimport * as React2 from \"react\";\n\n// src/hooks/utils/useSyncExternalStore.ts\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return {\n      ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n  return {\n    ...arg2,\n    queryKey: arg1\n  };\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach(key => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = React2.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(React2.useCallback(onStoreChange => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(_ref3 => {\n      let {\n        data\n      } = _ref3;\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, InfiniteQueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\nimport { parseMutationArgs, useMutation as useMutation_ } from \"@tanstack/react-query\";\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({\n    context: queryClientContext,\n    ...options\n  });\n}\n\n// src/hooks/utils/query/useQuery.ts\nimport { QueryObserver } from \"@tanstack/react-query\";\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\nvar useQueryClient2 = () => useQueryClient_({\n  context: queryClientContext\n});\n\n// src/hooks/providers/useProvider.ts\nimport { getProvider, watchProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useProvider() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useSyncExternalStoreWithSelector(cb => watchProvider({\n    chainId\n  }, cb), () => getProvider({\n    chainId\n  }), () => getProvider({\n    chainId\n  }), x => x, (a, b) => a.network.chainId === b.network.chainId);\n}\n\n// src/hooks/providers/useWebSocketProvider.ts\nimport { getWebSocketProvider, watchWebSocketProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useWebSocketProvider() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useSyncExternalStoreWithSelector2(cb => watchWebSocketProvider({\n    chainId\n  }, cb), () => getWebSocketProvider({\n    chainId\n  }), () => getWebSocketProvider({\n    chainId\n  }), x => x, (a, b) => a?.network.chainId === b?.network.chainId);\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const provider = useProvider({\n    chainId\n  });\n  return provider.network.chainId;\n}\n\n// src/hooks/utils/useForceUpdate.ts\nimport * as React3 from \"react\";\nfunction useForceUpdate() {\n  const [, forceUpdate] = React3.useReducer(x => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/network-status/useBlockNumber.ts\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport { debounce } from \"@wagmi/core/internal\";\nimport * as React4 from \"react\";\nfunction queryKey(_ref4) {\n  let {\n    chainId,\n    scopeKey\n  } = _ref4;\n  return [{\n    entity: \"blockNumber\",\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn(_ref5) {\n  let {\n    queryKey: [{\n      chainId\n    }]\n  } = _ref5;\n  return fetchBlockNumber({\n    chainId\n  });\n}\nfunction useBlockNumber() {\n  let {\n    cacheTime = 0,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    watch = false,\n    onBlock,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  const queryClient = useQueryClient2();\n  React4.useEffect(() => {\n    if (!enabled) return;\n    if (!watch && !onBlock) return;\n    const listener = debounce(blockNumber => {\n      if (watch) queryClient.setQueryData(queryKey({\n        chainId,\n        scopeKey\n      }), blockNumber);\n      if (onBlock) onBlock(blockNumber);\n    }, 1);\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"block\", listener);\n    return () => {\n      provider_.off(\"block\", listener);\n    };\n  }, [chainId, scopeKey, onBlock, provider, queryClient, watch, webSocketProvider, enabled]);\n  return useQuery(queryKey({\n    scopeKey,\n    chainId\n  }), queryFn, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React5 from \"react\";\nfunction queryKey2(_ref6) {\n  let {\n    chainId,\n    formatUnits,\n    scopeKey\n  } = _ref6;\n  return [{\n    entity: \"feeData\",\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\nfunction queryFn2(_ref7) {\n  let {\n    queryKey: [{\n      chainId,\n      formatUnits\n    }]\n  } = _ref7;\n  return fetchFeeData({\n    chainId,\n    formatUnits\n  });\n}\nfunction useFeeData() {\n  let {\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    formatUnits = \"wei\",\n    scopeKey,\n    staleTime,\n    suspense,\n    watch,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React5.useMemo(() => queryKey2({\n    chainId,\n    formatUnits,\n    scopeKey\n  }), [chainId, formatUnits, scopeKey]);\n  const feeDataQuery = useQuery(queryKey_, queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock(_ref8) {\n  let {\n    chainId,\n    enabled,\n    queryKey: queryKey17\n  } = _ref8;\n  const queryClient = useQueryClient2();\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? () => queryClient.invalidateQueries(queryKey17) : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\nvar isPlainObject = obj => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot) {\n  let getServerSnapshot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSnapshot;\n  let isEqual = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : deepEqual;\n  const trackedKeys = React6.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, x => x, (a, b) => {\n    if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n      for (const key of trackedKeys.current) {\n        const equal = isEqual(a[key], b[key]);\n        if (!equal) return false;\n      }\n      return true;\n    }\n    return isEqual(a, b);\n  });\n  if (isPlainObject(result)) {\n    const trackedResult = {\n      ...result\n    };\n    Object.defineProperties(trackedResult, Object.entries(trackedResult).reduce((res, _ref9) => {\n      let [key, value] = _ref9;\n      return {\n        ...res,\n        [key]: {\n          configurable: false,\n          enumerable: true,\n          get: () => {\n            if (!trackedKeys.current.includes(key)) {\n              trackedKeys.current.push(key);\n            }\n            return value;\n          }\n        }\n      };\n    }, {}));\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount() {\n  let {\n    onConnect,\n    onDisconnect\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const account = useSyncExternalStoreWithTracked(watchAccount, getAccount);\n  const previousAccountRef = React7.useRef();\n  const previousAccount = previousAccountRef.current ?? {};\n  if (!!onConnect && (previousAccount.status !== \"connected\" || previousAccount.status === void 0) && account.status === \"connected\") onConnect({\n    address: account.address,\n    connector: account.connector,\n    isReconnected: previousAccount.status === \"reconnecting\" || previousAccount.status === void 0\n  });\n  if (!!onDisconnect && previousAccount.status === \"connected\" && account.status === \"disconnected\") onDisconnect();\n  previousAccountRef.current = account;\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React8 from \"react\";\nfunction queryKey3(_ref10) {\n  let {\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  } = _ref10;\n  return [{\n    entity: \"balance\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }];\n}\nfunction queryFn3(_ref11) {\n  let {\n    queryKey: [{\n      address,\n      chainId,\n      formatUnits,\n      token\n    }]\n  } = _ref11;\n  if (!address) throw new Error(\"address is required\");\n  return fetchBalance({\n    address,\n    chainId,\n    formatUnits,\n    token\n  });\n}\nfunction useBalance() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    formatUnits,\n    scopeKey,\n    staleTime,\n    suspense,\n    token,\n    watch,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React8.useMemo(() => queryKey3({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }), [address, chainId, formatUnits, scopeKey, token]);\n  const balanceQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\nimport { connect } from \"@wagmi/core\";\nimport * as React9 from \"react\";\nvar mutationKey = args => [{\n  entity: \"connect\",\n  ...args\n}];\nvar mutationFn = args => {\n  const {\n    connector,\n    chainId\n  } = args;\n  if (!connector) throw new Error(\"connector is required\");\n  return connect({\n    connector,\n    chainId\n  });\n};\nfunction useConnect() {\n  let {\n    chainId,\n    connector,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const client = useClient();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({\n    connector,\n    chainId\n  }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React9.useCallback(args => {\n    return mutate({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutate]);\n  const connectAsync = React9.useCallback(args => {\n    return mutateAsync({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutateAsync]);\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: client.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{\n  entity: \"disconnect\"\n}];\nvar mutationFn2 = () => disconnect();\nfunction useDisconnect() {\n  let {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...(onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {}),\n    onMutate,\n    ...(onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {}),\n    ...(onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {})\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\nfunction useNetwork() {\n  return useSyncExternalStoreWithTracked(watchNetwork, getNetwork);\n}\n\n// src/hooks/accounts/useSigner.ts\nimport { fetchSigner, watchSigner } from \"@wagmi/core\";\nimport * as React10 from \"react\";\nfunction queryKey4(_ref12) {\n  let {\n    chainId\n  } = _ref12;\n  return [{\n    entity: \"signer\",\n    chainId,\n    persist: false\n  }];\n}\nfunction queryFn4(_ref13) {\n  let {\n    queryKey: [{\n      chainId\n    }]\n  } = _ref13;\n  return fetchSigner({\n    chainId\n  });\n}\nfunction useSigner() {\n  let {\n    chainId: chainId_,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    connector\n  } = useAccount();\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const signerQuery = useQuery(queryKey4({\n    chainId\n  }), queryFn4, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React10.useEffect(() => {\n    const unwatch = watchSigner({\n      chainId\n    }, signer => {\n      if (signer) queryClient.invalidateQueries(queryKey4({\n        chainId\n      }));else queryClient.removeQueries(queryKey4({\n        chainId\n      }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return signerQuery;\n}\n\n// src/hooks/accounts/useSignMessage.ts\nimport { signMessage } from \"@wagmi/core\";\nimport * as React11 from \"react\";\nvar mutationKey3 = args => [{\n  entity: \"signMessage\",\n  ...args\n}];\nvar mutationFn3 = args => {\n  const {\n    message\n  } = args;\n  if (!message) throw new Error(\"message is required\");\n  return signMessage({\n    message\n  });\n};\nfunction useSignMessage() {\n  let {\n    message,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({\n    message\n  }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React11.useCallback(args => mutate(args || {\n    message\n  }), [message, mutate]);\n  const signMessageAsync = React11.useCallback(args => mutateAsync(args || {\n    message\n  }), [message, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React12 from \"react\";\nfunction mutationKey4(_ref14) {\n  let {\n    domain,\n    types,\n    value\n  } = _ref14;\n  return [{\n    entity: \"signTypedData\",\n    domain,\n    types,\n    value\n  }];\n}\nfunction mutationFn4(args) {\n  const {\n    domain,\n    types,\n    value\n  } = args;\n  if (!domain) throw new Error(\"domain is required\");\n  if (!types) throw new Error(\"types is required\");\n  if (!value) throw new Error(\"value is required\");\n  return signTypedData({\n    domain,\n    types,\n    value\n  });\n}\nfunction useSignTypedData() {\n  let {\n    domain,\n    types,\n    value,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey4({\n    domain,\n    types,\n    value\n  }), mutationFn4, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signTypedData2 = React12.useCallback(args => mutate({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    value: args?.value ?? value\n  }), [domain, types, value, mutate]);\n  const signTypedDataAsync = React12.useCallback(args => mutateAsync({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    value: args?.value ?? value\n  }), [domain, types, value, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React13 from \"react\";\nvar mutationKey5 = args => [{\n  entity: \"switchNetwork\",\n  ...args\n}];\nvar mutationFn5 = args => {\n  const {\n    chainId\n  } = args;\n  if (!chainId) throw new Error(\"chainId is required\");\n  return switchNetwork({\n    chainId\n  });\n};\nfunction useSwitchNetwork() {\n  let {\n    chainId,\n    throwForSwitchChainNotSupported,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const client = useClient();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({\n    chainId\n  }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React13.useCallback(chainId_ => mutate({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutate]);\n  const switchNetworkAsync_ = React13.useCallback(chainId_ => mutateAsync({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutateAsync]);\n  React13.useEffect(() => {\n    const unwatch = client.subscribe(_ref15 => {\n      let {\n        chains,\n        connector\n      } = _ref15;\n      return {\n        chains,\n        connector\n      };\n    }, forceUpdate);\n    return unwatch;\n  }, [client, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!client.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: client.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContract.ts\nimport { getContract } from \"@wagmi/core\";\nimport * as React14 from \"react\";\nfunction useContract() {\n  let {\n    address,\n    abi,\n    signerOrProvider\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return React14.useMemo(() => {\n    if (!address || !abi) return null;\n    return getContract({\n      address,\n      abi,\n      signerOrProvider: signerOrProvider === null ? void 0 : signerOrProvider\n    });\n  }, [address, abi, signerOrProvider]);\n}\n\n// src/hooks/contracts/useContractEvent.ts\nimport * as React15 from \"react\";\nfunction useContractEvent() {\n  let {\n    address,\n    chainId,\n    abi,\n    listener,\n    eventName,\n    once\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  const contract = useContract({\n    address,\n    abi,\n    signerOrProvider: webSocketProvider ?? provider\n  });\n  const callbackRef = React15.useRef(listener);\n  callbackRef.current = listener;\n  React15.useEffect(() => {\n    if (!contract || !eventName) return;\n    const handler = function () {\n      return callbackRef.current(...arguments);\n    };\n    if (once) contract.once(eventName, handler);else contract.on(eventName, handler);\n    return () => {\n      contract.off(eventName, handler);\n    };\n  }, [contract, eventName]);\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\nfunction queryKey5(_ref16) {\n  let {\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  } = _ref16;\n  return [{\n    entity: \"readContractsInfinite\",\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  }];\n}\nfunction queryFn5(_ref17) {\n  let {\n    contracts\n  } = _ref17;\n  return _ref18 => {\n    let {\n      queryKey: [{\n        allowFailure,\n        overrides\n      }],\n      pageParam\n    } = _ref18;\n    return readContracts({\n      allowFailure,\n      contracts: contracts(pageParam || void 0),\n      overrides\n    });\n  };\n}\nfunction useContractInfiniteReads(_ref19) {\n  let {\n    allowFailure,\n    cacheKey,\n    cacheTime,\n    contracts,\n    enabled: enabled_ = true,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n    suspense\n  } = _ref19;\n  const queryKey_ = React16.useMemo(() => queryKey5({\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  }), [allowFailure, cacheKey, overrides, scopeKey]);\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({\n    contracts\n  }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, _ref20) {\n  let {\n    perPage,\n    start,\n    direction\n  } = _ref20;\n  const contracts = function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return [...Array(perPage).keys()].map(index => {\n      return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n    }).filter(index => index >= 0).map(fn).flat();\n  };\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, parseContractResult, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\nfunction queryKey6(_ref21) {\n  let {\n    address,\n    args,\n    blockNumber,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  } = _ref21;\n  return [{\n    entity: \"readContract\",\n    address,\n    args,\n    blockNumber,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  }];\n}\nfunction queryFn6(_ref22) {\n  let {\n    abi\n  } = _ref22;\n  return async _ref23 => {\n    let {\n      queryKey: [{\n        address,\n        args,\n        chainId,\n        functionName,\n        overrides\n      }]\n    } = _ref23;\n    if (!abi) throw new Error(\"abi is required\");\n    if (!address) throw new Error(\"address is required\");\n    return (await readContract({\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides\n    })) ?? null;\n  };\n}\nfunction useContractRead() {\n  let {\n    abi,\n    address,\n    args,\n    cacheOnBlock = false,\n    cacheTime,\n    chainId: chainId_,\n    enabled: enabled_ = true,\n    functionName,\n    isDataEqual,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n    suspense,\n    watch\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const {\n    data: blockNumber\n  } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const queryKey_ = React17.useMemo(() => queryKey6({\n    address,\n    args,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  }), [address, args, blockNumber, cacheOnBlock, chainId, functionName, overrides, scopeKey]);\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(queryKey_, queryFn6({\n    abi\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    select(data) {\n      const result = abi && functionName ? parseContractResult({\n        abi,\n        data,\n        functionName\n      }) : data;\n      return select ? select(result) : result;\n    },\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractReads.ts\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, parseContractResult as parseContractResult2, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\nfunction queryKey7(_ref24) {\n  let {\n    allowFailure,\n    blockNumber,\n    chainId,\n    contracts,\n    overrides,\n    scopeKey\n  } = _ref24;\n  return [{\n    entity: \"readContracts\",\n    allowFailure,\n    blockNumber,\n    chainId,\n    scopeKey,\n    contracts: (contracts ?? []).map(_ref25 => {\n      let {\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      } = _ref25;\n      return {\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      };\n    }),\n    overrides\n  }];\n}\nfunction queryFn7(_ref26) {\n  let {\n    abis\n  } = _ref26;\n  return _ref27 => {\n    let {\n      queryKey: [{\n        allowFailure,\n        contracts: contracts_,\n        overrides\n      }]\n    } = _ref27;\n    const contracts = contracts_.map((contract, i) => ({\n      ...contract,\n      abi: abis[i]\n    }));\n    return readContracts2({\n      allowFailure,\n      contracts,\n      overrides\n    });\n  };\n}\nfunction useContractReads() {\n  let {\n    allowFailure = true,\n    cacheOnBlock = false,\n    cacheTime,\n    contracts,\n    enabled: enabled_ = true,\n    isDataEqual,\n    keepPreviousData,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n    suspense,\n    watch\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data: blockNumber\n  } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const queryKey_ = React18.useMemo(() => queryKey7({\n    allowFailure,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    chainId,\n    contracts,\n    overrides,\n    scopeKey\n  }), [allowFailure, blockNumber, cacheOnBlock, chainId, scopeKey, contracts, overrides]);\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && contracts?.every(x => x.abi && x.address && x.functionName));\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(_ref28 => {\n    let {\n      abi\n    } = _ref28;\n    return abi;\n  });\n  return useQuery(queryKey_, queryFn7({\n    abis\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select(data) {\n      const result = data.map((data2, i) => {\n        const {\n          abi,\n          functionName\n        } = contracts?.[i] ?? {};\n        return abi && functionName ? parseContractResult2({\n          abi,\n          functionName,\n          data: data2\n        }) : data2;\n      });\n      return select ? select(result) : result;\n    },\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\nimport { writeContract } from \"@wagmi/core\";\nimport * as React19 from \"react\";\nfunction mutationKey6(_ref29) {\n  let {\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    overrides,\n    request\n  } = _ref29;\n  return [{\n    entity: \"writeContract\",\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    overrides,\n    request\n  }];\n}\nfunction mutationFn6(_ref30) {\n  let {\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    mode,\n    overrides,\n    request\n  } = _ref30;\n  if (!address) throw new Error(\"address is required\");\n  if (!abi) throw new Error(\"abi is required\");\n  if (!functionName) throw new Error(\"functionName is required\");\n  switch (mode) {\n    case \"prepared\":\n      {\n        if (!request) throw new Error(\"request is required\");\n        return writeContract({\n          mode: \"prepared\",\n          address,\n          chainId,\n          abi,\n          functionName,\n          request\n        });\n      }\n    case \"recklesslyUnprepared\":\n      return writeContract({\n        address,\n        abi,\n        functionName,\n        args,\n        chainId,\n        mode: \"recklesslyUnprepared\",\n        overrides\n      });\n  }\n}\nfunction useContractWrite() {\n  let {\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    mode,\n    overrides,\n    request,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey6({\n    address,\n    abi,\n    functionName,\n    args,\n    chainId,\n    mode,\n    overrides,\n    request\n  }), mutationFn6, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const write = React19.useCallback(overrideConfig => {\n    return mutate({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: overrideConfig ? \"recklesslyUnprepared\" : mode,\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides,\n      request\n    });\n  }, [address, args, chainId, abi, functionName, mode, mutate, overrides, request]);\n  const writeAsync = React19.useCallback(overrideConfig => {\n    return mutateAsync({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: overrideConfig ? \"recklesslyUnprepared\" : mode,\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides,\n      request\n    });\n  }, [address, args, chainId, abi, functionName, mode, mutateAsync, overrides, request]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write: mode === \"prepared\" && !request ? void 0 : write,\n    writeAsync: mode === \"prepared\" && !request ? void 0 : writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\nimport { prepareWriteContract } from \"@wagmi/core\";\nfunction queryKey8(_ref31) {\n  let {\n    activeChainId,\n    args,\n    address,\n    chainId,\n    functionName,\n    overrides,\n    signerAddress\n  } = _ref31;\n  return [{\n    entity: \"prepareContractTransaction\",\n    activeChainId,\n    address,\n    args,\n    chainId,\n    functionName,\n    overrides,\n    signerAddress\n  }];\n}\nfunction queryFn8(_ref32) {\n  let {\n    abi,\n    signer\n  } = _ref32;\n  return _ref33 => {\n    let {\n      queryKey: [{\n        args,\n        address,\n        chainId,\n        functionName,\n        overrides\n      }]\n    } = _ref33;\n    if (!abi) throw new Error(\"abi is required\");\n    return prepareWriteContract({\n      abi,\n      args,\n      address,\n      chainId,\n      functionName,\n      overrides,\n      signer\n    });\n  };\n}\nfunction usePrepareContractWrite() {\n  let {\n    address,\n    abi,\n    functionName,\n    chainId,\n    args,\n    overrides,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: signer\n  } = useSigner({\n    chainId\n  });\n  const prepareContractWriteQuery = useQuery(queryKey8({\n    activeChainId: activeChain?.id,\n    address,\n    args,\n    chainId,\n    functionName,\n    scopeKey,\n    signerAddress: signer?._address,\n    overrides\n  }), queryFn8({\n    abi,\n    signer\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && abi && address && functionName && signer),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      abi,\n      address,\n      args,\n      functionName,\n      mode: \"prepared\",\n      overrides,\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\nimport { fetchToken } from \"@wagmi/core\";\nfunction queryKey9(_ref34) {\n  let {\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  } = _ref34;\n  return [{\n    entity: \"token\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\nfunction queryFn9(_ref35) {\n  let {\n    queryKey: [{\n      address,\n      chainId,\n      formatUnits\n    }]\n  } = _ref35;\n  if (!address) throw new Error(\"address is required\");\n  return fetchToken({\n    address,\n    chainId,\n    formatUnits\n  });\n}\nfunction useToken() {\n  let {\n    address,\n    chainId: chainId_,\n    formatUnits = \"ether\",\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey9({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }), queryFn9, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAddress.ts\nimport { fetchEnsAddress } from \"@wagmi/core\";\nfunction queryKey10(_ref36) {\n  let {\n    chainId,\n    name,\n    scopeKey\n  } = _ref36;\n  return [{\n    entity: \"ensAddress\",\n    chainId,\n    name,\n    scopeKey\n  }];\n}\nfunction queryFn10(_ref37) {\n  let {\n    queryKey: [{\n      chainId,\n      name\n    }]\n  } = _ref37;\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsAddress({\n    chainId,\n    name\n  });\n}\nfunction useEnsAddress() {\n  let {\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    name,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey10({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\nimport { fetchEnsAvatar } from \"@wagmi/core\";\nfunction queryKey11(_ref38) {\n  let {\n    address,\n    chainId,\n    scopeKey\n  } = _ref38;\n  return [{\n    entity: \"ensAvatar\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn11(_ref39) {\n  let {\n    queryKey: [{\n      address,\n      chainId\n    }]\n  } = _ref39;\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsAvatar({\n    address,\n    chainId\n  });\n}\nfunction useEnsAvatar() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey11({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\nimport { fetchEnsName } from \"@wagmi/core\";\nfunction queryKey12(_ref40) {\n  let {\n    address,\n    chainId,\n    scopeKey\n  } = _ref40;\n  return [{\n    entity: \"ensName\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn12(_ref41) {\n  let {\n    queryKey: [{\n      address,\n      chainId\n    }]\n  } = _ref41;\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsName({\n    address,\n    chainId\n  });\n}\nfunction useEnsName() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey12({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\nimport { fetchEnsResolver } from \"@wagmi/core\";\nfunction queryKey13(_ref42) {\n  let {\n    chainId,\n    name,\n    scopeKey\n  } = _ref42;\n  return [{\n    entity: \"ensResolver\",\n    chainId,\n    name,\n    scopeKey,\n    persist: false\n  }];\n}\nfunction queryFn13(_ref43) {\n  let {\n    queryKey: [{\n      chainId,\n      name\n    }]\n  } = _ref43;\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsResolver({\n    chainId,\n    name\n  });\n}\nfunction useEnsResolver() {\n  let {\n    chainId: chainId_,\n    name,\n    enabled = true,\n    scopeKey,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey13({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\nimport { prepareSendTransaction } from \"@wagmi/core\";\nfunction queryKey14(_ref44) {\n  let {\n    activeChainId,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress\n  } = _ref44;\n  return [{\n    entity: \"prepareSendTransaction\",\n    activeChainId,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress\n  }];\n}\nfunction queryFn14(_ref45) {\n  let {\n    signer\n  } = _ref45;\n  return _ref46 => {\n    let {\n      queryKey: [{\n        chainId,\n        request\n      }]\n    } = _ref46;\n    if (!request?.to) throw new Error(\"request.to is required\");\n    return prepareSendTransaction({\n      chainId,\n      request: {\n        ...request,\n        to: request.to\n      },\n      signer\n    });\n  };\n}\nfunction usePrepareSendTransaction() {\n  let {\n    chainId,\n    request,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: signer\n  } = useSigner({\n    chainId\n  });\n  const prepareSendTransactionQuery = useQuery(queryKey14({\n    activeChainId: activeChain?.id,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress: signer?._address\n  }), queryFn14({\n    signer\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && signer && request && request.to),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      request: void 0,\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.data\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\nvar mutationKey7 = args => [{\n  entity: \"sendTransaction\",\n  ...args\n}];\nvar mutationFn7 = _ref47 => {\n  let {\n    chainId,\n    mode,\n    request\n  } = _ref47;\n  return sendTransaction({\n    chainId,\n    mode,\n    request\n  });\n};\nfunction useSendTransaction(_ref48) {\n  let {\n    chainId,\n    mode,\n    request,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = _ref48;\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey7({\n    chainId,\n    mode,\n    request\n  }), mutationFn7, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const sendTransaction2 = React20.useCallback(args => mutate({\n    chainId,\n    mode,\n    request: args?.recklesslySetUnpreparedRequest ?? request\n  }), [chainId, mode, mutate, request]);\n  const sendTransactionAsync = React20.useCallback(args => mutateAsync({\n    chainId,\n    mode,\n    request: args?.recklesslySetUnpreparedRequest ?? request\n  }), [chainId, mode, mutateAsync, request]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !request ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !request ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\nimport { fetchTransaction } from \"@wagmi/core\";\nfunction queryKey15(_ref49) {\n  let {\n    chainId,\n    hash,\n    scopeKey\n  } = _ref49;\n  return [{\n    entity: \"transaction\",\n    chainId,\n    hash,\n    scopeKey\n  }];\n}\nfunction queryFn15(_ref50) {\n  let {\n    queryKey: [{\n      chainId,\n      hash\n    }]\n  } = _ref50;\n  if (!hash) throw new Error(\"hash is required\");\n  return fetchTransaction({\n    chainId,\n    hash\n  });\n}\nfunction useTransaction() {\n  let {\n    cacheTime = 0,\n    chainId: chainId_,\n    enabled = true,\n    hash,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey15({\n    chainId,\n    hash,\n    scopeKey\n  }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\nimport { waitForTransaction } from \"@wagmi/core\";\nfunction queryKey16(_ref51) {\n  let {\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  } = _ref51;\n  return [{\n    entity: \"waitForTransaction\",\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  }];\n}\nfunction queryFn16(_ref52) {\n  let {\n    onSpeedUp\n  } = _ref52;\n  return _ref53 => {\n    let {\n      queryKey: [{\n        chainId,\n        confirmations,\n        hash,\n        timeout\n      }]\n    } = _ref53;\n    if (!hash) throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onSpeedUp,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction() {\n  let {\n    chainId: chainId_,\n    confirmations,\n    hash,\n    timeout,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSpeedUp,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey16({\n    chainId,\n    confirmations,\n    hash,\n    scopeKey,\n    timeout\n  }), queryFn16({\n    onSpeedUp\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\nimport * as React21 from \"react\";\nfunction useWatchPendingTransactions(_ref54) {\n  let {\n    chainId: chainId_,\n    enabled = true,\n    listener\n  } = _ref54;\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  React21.useEffect(() => {\n    if (!enabled) return;\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"pending\", listener);\n    return () => {\n      provider_.off(\"pending\", listener);\n    };\n  }, [enabled, listener, provider, webSocketProvider]);\n}\n\n// src/index.ts\nimport { AddChainError, ChainDoesNotSupportMulticallError, ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, ContractMethodDoesNotExistError, ContractMethodNoResultError, ContractMethodRevertedError, ContractResultDecodeError, ProviderChainsNotFound, ProviderRpcError, ResourceUnavailableError, RpcError, SwitchChainError, SwitchChainNotSupportedError, UserRejectedRequestError, configureChains, createStorage as createStorage2, deepEqual as deepEqual5, deserialize, erc20ABI, erc721ABI, erc4626ABI, goerli, mainnet, readContracts as readContracts3, serialize } from \"@wagmi/core\";\nexport { AddChainError, ChainDoesNotSupportMulticallError, ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, Context, ContractMethodDoesNotExistError, ContractMethodNoResultError, ContractMethodRevertedError, ContractResultDecodeError, ProviderChainsNotFound, ProviderRpcError, ResourceUnavailableError, RpcError, SwitchChainError, SwitchChainNotSupportedError, UserRejectedRequestError, WagmiConfig, configureChains, createClient, createStorage2 as createStorage, deepEqual5 as deepEqual, deserialize, erc20ABI, erc4626ABI, erc721ABI, goerli, mainnet, paginatedIndexesConfig, readContracts3 as readContracts, serialize, useAccount, useBalance, useBlockNumber, useChainId, useClient, useConnect, useContract, useContractEvent, useContractInfiniteReads, useContractRead, useContractReads, useContractWrite, useDisconnect, useEnsAddress, useEnsAvatar, useEnsName, useEnsResolver, useFeeData, useInfiniteQuery, useMutation, useNetwork, usePrepareContractWrite, usePrepareSendTransaction, useProvider, useQuery, useQueryClient2 as useQueryClient, useSendTransaction, useSignMessage, useSignTypedData, useSigner, useSwitchNetwork, useToken, useTransaction, useWaitForTransaction, useWatchPendingTransactions, useWebSocketProvider };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}