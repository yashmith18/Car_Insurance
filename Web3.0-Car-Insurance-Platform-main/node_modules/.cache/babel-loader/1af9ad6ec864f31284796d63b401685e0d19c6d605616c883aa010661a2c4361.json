{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nvar PRE_ENTER = 0;\nvar ENTERING = 1;\nvar ENTERED = 2;\nvar PRE_EXIT = 3;\nvar EXITING = 4;\nvar EXITED = 5;\nvar UNMOUNTED = 6;\nvar STATES = ['preEnter', 'entering', 'entered', 'preExit', 'exiting', 'exited', 'unmounted'];\nvar startOrEnd = function startOrEnd(unmounted) {\n  return unmounted ? UNMOUNTED : EXITED;\n};\nvar updateState = function updateState(state, setState, latestState, timeoutId, onChange) {\n  clearTimeout(timeoutId.current);\n  setState(state);\n  latestState.current = state;\n  onChange && onChange({\n    state: STATES[state]\n  });\n};\nvar useTransition = function useTransition(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$enter = _ref.enter,\n    enter = _ref$enter === void 0 ? true : _ref$enter,\n    _ref$exit = _ref.exit,\n    exit = _ref$exit === void 0 ? true : _ref$exit,\n    preEnter = _ref.preEnter,\n    preExit = _ref.preExit,\n    timeout = _ref.timeout,\n    initialEntered = _ref.initialEntered,\n    mountOnEnter = _ref.mountOnEnter,\n    unmountOnExit = _ref.unmountOnExit,\n    onChange = _ref.onChange;\n  var _useState = useState(initialEntered ? ENTERED : startOrEnd(mountOnEnter)),\n    state = _useState[0],\n    setState = _useState[1];\n  var latestState = useRef(state);\n  var timeoutId = useRef();\n  var enterTimeout, exitTimeout;\n  if (typeof timeout === 'object') {\n    enterTimeout = timeout.enter;\n    exitTimeout = timeout.exit;\n  } else {\n    enterTimeout = exitTimeout = timeout;\n  }\n  var endTransition = useCallback(function () {\n    var newState;\n    switch (latestState.current) {\n      case ENTERING:\n      case PRE_ENTER:\n        newState = ENTERED;\n        break;\n      case EXITING:\n      case PRE_EXIT:\n        newState = startOrEnd(unmountOnExit);\n        break;\n    }\n    if (newState !== undefined) {\n      updateState(newState, setState, latestState, timeoutId, onChange);\n    }\n  }, [onChange, unmountOnExit]);\n  var toggle = useCallback(function (toEnter) {\n    var transitState = function transitState(newState) {\n      updateState(newState, setState, latestState, timeoutId, onChange);\n      switch (newState) {\n        case ENTERING:\n          if (enterTimeout >= 0) timeoutId.current = setTimeout(endTransition, enterTimeout);\n          break;\n        case EXITING:\n          if (exitTimeout >= 0) timeoutId.current = setTimeout(endTransition, exitTimeout);\n          break;\n        case PRE_ENTER:\n        case PRE_EXIT:\n          timeoutId.current = setTimeout(function () {\n            return transitState(newState + 1);\n          }, 0);\n          break;\n      }\n    };\n    var enterStage = latestState.current <= ENTERED;\n    if (typeof toEnter !== 'boolean') toEnter = !enterStage;\n    if (toEnter) {\n      if (!enterStage) {\n        transitState(enter ? preEnter ? PRE_ENTER : ENTERING : ENTERED);\n      }\n    } else {\n      if (enterStage) {\n        transitState(exit ? preExit ? PRE_EXIT : EXITING : startOrEnd(unmountOnExit));\n      }\n    }\n  }, [endTransition, onChange, enter, exit, preEnter, preExit, enterTimeout, exitTimeout, unmountOnExit]);\n  useEffect(function () {\n    return function () {\n      return clearTimeout(timeoutId.current);\n    };\n  }, []);\n  return [STATES[state], toggle, endTransition];\n};\nexport { useTransition as default, useTransition };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}