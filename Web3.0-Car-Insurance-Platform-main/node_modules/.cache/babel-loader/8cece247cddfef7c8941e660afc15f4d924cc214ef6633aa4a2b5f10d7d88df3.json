{"ast":null,"code":"import React from 'react';\nvar HuddleIframe = function HuddleIframe(_ref) {\n  var config = _ref.config;\n  var noBorder = config.noBorder,\n    roomUrl = config.roomUrl,\n    height = config.height,\n    width = config.width;\n  return React.createElement(\"iframe\", {\n    id: \"huddle01-iframe\",\n    src: roomUrl,\n    style: {\n      border: noBorder ? 'none' : '3px #333dde solid'\n    },\n    name: \"myiFrame\",\n    scrolling: \"no\",\n    height: height || '90%',\n    width: width || '90%',\n    allowFullScreen: true,\n    allow: \"camera; microphone; clipboard-read; clipboard-write; display-capture\"\n  });\n};\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar HuddleAppEvent;\n(function (HuddleAppEvent) {\n  HuddleAppEvent[\"AVATAR_URL_CHANGED\"] = \"avatar-url-changed\";\n  HuddleAppEvent[\"PEER_JOIN\"] = \"peer-join\";\n  HuddleAppEvent[\"PEER_LEFT\"] = \"peer-left\";\n  HuddleAppEvent[\"ME_LEFT\"] = \"me-left\";\n})(HuddleAppEvent || (HuddleAppEvent = {}));\nvar triggerIframeEvent = function triggerIframeEvent(event, data) {\n  window.parent.postMessage({\n    type: 'room-event',\n    eventData: _extends({\n      event: event\n    }, data)\n  }, '*');\n};\nvar on = function on(eventName, callback) {\n  return window.addEventListener('message', function (event) {\n    if (event.data.type !== 'room-event') return;\n    if (event.data.eventData.event === eventName) {\n      callback(event.data.eventData);\n    } // Do we trust the sender of this message?  (might be\n    // different from what we originally opened, for example).\n\n    if (event.origin !== 'http://example.com') return;\n  }, false);\n};\nvar callMethod = function callMethod(methodType, methodData) {\n  var huddleIframe = document.getElementById('huddle01-iframe');\n  if (huddleIframe != null && huddleIframe.contentWindow) huddleIframe.contentWindow.postMessage({\n    type: 'huddle01-iframe',\n    methodType: methodType,\n    methodData: methodData\n  }, '*');else console.log('huddleIframe is null');\n};\nvar methods = {\n  muteMic: function muteMic() {\n    callMethod('muteMic');\n  },\n  unmuteMic: function unmuteMic() {\n    callMethod('unmuteMic');\n  },\n  enableWebcam: function enableWebcam() {\n    callMethod('enableWebcam');\n  },\n  disableWebcam: function disableWebcam() {\n    callMethod('disableWebcam');\n  },\n  enableShare: function enableShare() {\n    callMethod('enableShare');\n  },\n  disableShare: function disableShare() {\n    callMethod('disableShare');\n  },\n  startRecording: function startRecording() {\n    callMethod('startRecording');\n  },\n  stopRecording: function stopRecording() {\n    callMethod('stopRecording');\n  },\n  sendReaction: function sendReaction(reaction) {\n    callMethod('sendReaction', reaction);\n  },\n  connectWallet: function connectWallet(address) {\n    callMethod('connectWallet', address);\n  },\n  toggleRaiseHand: function toggleRaiseHand() {\n    callMethod('toggleRaiseHand');\n  },\n  changeAvatarUrl: function changeAvatarUrl(avatarUrl) {\n    callMethod('changeAvatarUrl', avatarUrl);\n  }\n};\nvar infoMethods = {\n  getParticipants: function getParticipants() {\n    callMethod('getParticipants');\n  }\n};\nvar huddleIframeApp = {\n  on: on,\n  methods: methods,\n  infoMethods: infoMethods\n};\nexport { HuddleAppEvent, HuddleIframe, huddleIframeApp, triggerIframeEvent };\n//# sourceMappingURL=huddle01-iframe.esm.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}