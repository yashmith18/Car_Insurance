{"ast":null,"code":"'use strict';\n\nconst retry = require('retry');\nconst networkErrorMsgs = ['Failed to fetch',\n// Chrome\n'NetworkError when attempting to fetch resource.',\n// Firefox\n'The Internet connection appears to be offline.',\n// Safari\n'Network request failed' // `cross-fetch`\n];\n\nclass AbortError extends Error {\n  constructor(message) {\n    super();\n    if (message instanceof Error) {\n      this.originalError = message;\n      ({\n        message\n      } = message);\n    } else {\n      this.originalError = new Error(message);\n      this.originalError.stack = this.stack;\n    }\n    this.name = 'AbortError';\n    this.message = message;\n  }\n}\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n  // Minus 1 from attemptNumber because the first attempt does not count as a retry\n  const retriesLeft = options.retries - (attemptNumber - 1);\n  error.attemptNumber = attemptNumber;\n  error.retriesLeft = retriesLeft;\n  return error;\n};\nconst isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);\nconst pRetry = (input, options) => new Promise((resolve, reject) => {\n  options = {\n    onFailedAttempt: () => {},\n    retries: 10,\n    ...options\n  };\n  const operation = retry.operation(options);\n  operation.attempt(async attemptNumber => {\n    try {\n      resolve(await input(attemptNumber));\n    } catch (error) {\n      if (!(error instanceof Error)) {\n        reject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n        return;\n      }\n      if (error instanceof AbortError) {\n        operation.stop();\n        reject(error.originalError);\n      } else if (error instanceof TypeError && !isNetworkError(error.message)) {\n        operation.stop();\n        reject(error);\n      } else {\n        decorateErrorWithCounts(error, attemptNumber, options);\n        try {\n          await options.onFailedAttempt(error);\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (!operation.retry(error)) {\n          reject(operation.mainError());\n        }\n      }\n    }\n  });\n});\nmodule.exports = pRetry;\n// TODO: remove this in the next major version\nmodule.exports.default = pRetry;\nmodule.exports.AbortError = AbortError;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}