{"ast":null,"code":"import { __rest } from 'tslib';\nimport { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, resolveVariantFromProps } from '../../render/utils/variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nfunction makeState(_a, props, context, presenceContext) {\n  var scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps,\n    createRenderState = _a.createRenderState,\n    onMount = _a.onMount;\n  var state = {\n    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n  if (onMount) {\n    state.mount = function (instance) {\n      return onMount(props, instance, state);\n    };\n  }\n  return state;\n}\nvar makeUseVisualState = function (config) {\n  return function (props, isStatic) {\n    var context = useContext(MotionContext);\n    var presenceContext = useContext(PresenceContext);\n    return isStatic ? makeState(config, props, context, presenceContext) : useConstant(function () {\n      return makeState(config, props, context, presenceContext);\n    });\n  };\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n  var values = {};\n  var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;\n  var motionValues = scrapeMotionValues(props);\n  for (var key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n  var initial = props.initial,\n    animate = props.animate;\n  var isControllingVariants = checkIfControllingVariants(props);\n  var isVariantNode = checkIfVariantNode(props);\n  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {\n    initial !== null && initial !== void 0 ? initial : initial = context.initial;\n    animate !== null && animate !== void 0 ? animate : animate = context.animate;\n  }\n  var initialAnimationIsBlocked = blockInitialAnimation || initial === false;\n  var variantToSet = initialAnimationIsBlocked ? animate : initial;\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n    var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n    list.forEach(function (definition) {\n      var resolved = resolveVariantFromProps(props, definition);\n      if (!resolved) return;\n      var transitionEnd = resolved.transitionEnd;\n      resolved.transition;\n      var target = __rest(resolved, [\"transitionEnd\", \"transition\"]);\n      for (var key in target) {\n        var valueTarget = target[key];\n        if (Array.isArray(valueTarget)) {\n          /**\n           * Take final keyframe if the initial animation is blocked because\n           * we want to initialise at the end of that blocked animation.\n           */\n          var index = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;\n          valueTarget = valueTarget[index];\n        }\n        if (valueTarget !== null) {\n          values[key] = valueTarget;\n        }\n      }\n      for (var key in transitionEnd) values[key] = transitionEnd[key];\n    });\n  }\n  return values;\n}\nexport { makeUseVisualState };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}