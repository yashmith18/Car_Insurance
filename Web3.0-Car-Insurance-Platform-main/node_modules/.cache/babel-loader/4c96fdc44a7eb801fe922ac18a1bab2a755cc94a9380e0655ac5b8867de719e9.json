{"ast":null,"code":"import { equals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class VerifyingGetOnlyBlockStore extends BaseBlockstore {\n  constructor(blockstore) {\n    super();\n    this.store = blockstore;\n  }\n  async get(cid) {\n    const res = await this.store.get(cid);\n    if (!res) {\n      throw new Error(`Incomplete CAR. Block missing for CID ${cid}`);\n    }\n    if (!isValid({\n      cid,\n      bytes: res\n    })) {\n      throw new Error(`Invalid CAR. Hash of block data does not match CID ${cid}`);\n    }\n    return res;\n  }\n  static fromBlockstore(b) {\n    return new VerifyingGetOnlyBlockStore(b);\n  }\n  static fromCarReader(cr) {\n    return new VerifyingGetOnlyBlockStore({\n      // Return bytes in the same fashion as a Blockstore implementation\n      get: async cid => {\n        const block = await cr.get(cid);\n        return block === null || block === void 0 ? void 0 : block.bytes;\n      }\n    });\n  }\n}\nasync function isValid(_ref) {\n  let {\n    cid,\n    bytes\n  } = _ref;\n  const hash = await sha256.digest(bytes);\n  return equals(hash.digest, cid.multihash.digest);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}